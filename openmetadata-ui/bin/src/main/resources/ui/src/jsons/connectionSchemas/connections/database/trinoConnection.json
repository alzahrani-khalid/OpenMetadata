{
  "$id": "https://open-metadata.org/schema/entity/services/connections/database/trinoConnection.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "TrinoConnection",
  "description": "Trino Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.database.TrinoConnection",
  "definitions": {
    "trinoType": {
      "description": "Service type.",
      "type": "string",
      "enum": [
        "Trino"
      ],
      "default": "Trino"
    },
    "trinoScheme": {
      "description": "SQLAlchemy driver scheme options.",
      "type": "string",
      "enum": [
        "trino"
      ],
      "default": "trino"
    }
  },
  "properties": {
    "type": {
      "title": "Service Type",
      "description": "Service Type",
      "default": "Trino",
      "type": "string",
      "enum": [
        "Trino"
      ]
    },
    "scheme": {
      "title": "Connection Scheme",
      "description": "SQLAlchemy driver scheme options.",
      "default": "trino",
      "type": "string",
      "enum": [
        "trino"
      ]
    },
    "username": {
      "title": "Username",
      "description": "Username to connect to Trino. This user should have privileges to read all the metadata in Trino.",
      "type": "string"
    },
    "authType": {
      "title": "Auth Configuration Type",
      "description": "Choose Auth Config Type.",
      "oneOf": [
        {
          "$id": "https://open-metadata.org/schema/entity/services/connections/database/common/basicAuth.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "Basic Auth",
          "description": "Common Database Connection Config",
          "javaType": "org.openmetadata.schema.services.connections.database.common.basicAuth",
          "type": "object",
          "properties": {
            "password": {
              "title": "Password",
              "description": "Password to connect to source.",
              "type": "string",
              "format": "password"
            }
          },
          "additionalProperties": false
        },
        {
          "$id": "https://open-metadata.org/schema/entity/services/connections/database/common/jwtAuth.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "JWT Auth",
          "description": "Common Database Connection Config",
          "javaType": "org.openmetadata.schema.services.connections.database.common.jwtAuth",
          "type": "object",
          "properties": {
            "jwt": {
              "title": "JWT",
              "description": "JWT to connect to source.",
              "type": "string",
              "format": "password"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "hostPort": {
      "title": "Host and Port",
      "description": "Host and port of the Trino service.",
      "type": "string"
    },
    "catalog": {
      "title": "Catalog",
      "description": "Catalog of the data source.",
      "type": "string"
    },
    "databaseSchema": {
      "title": "databaseSchema",
      "description": "databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.",
      "type": "string"
    },
    "proxies": {
      "title": "Proxies",
      "description": "Proxies for the connection to Trino data source",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "connectionOptions": {
      "title": "Connection Options",
      "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
      "description": "Additional connection options to build the URL that can be sent to service during the connection.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "connectionArguments": {
      "title": "Connection Arguments",
      "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
      "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
      "type": "object",
      "additionalProperties": {
        ".{1,}": {
          "type": "string"
        }
      }
    },
    "supportsMetadataExtraction": {
      "title": "Supports Metadata Extraction",
      "description": "Supports Metadata Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsUsageExtraction": {
      "title": "Supports Usage Extraction",
      "description": "Supports Usage Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsLineageExtraction": {
      "title": "Supports Lineage Extraction",
      "description": "Supports Lineage Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsDBTExtraction": {
      "description": "Supports DBT Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsProfiler": {
      "title": "Supports Profiler",
      "description": "Supports Profiler",
      "type": "boolean",
      "default": true
    },
    "supportsDatabase": {
      "title": "Supports Database",
      "description": "The source service supports the database concept in its hierarchy",
      "type": "boolean",
      "default": true
    },
    "supportsQueryComment": {
      "title": "Supports Query Comment",
      "description": "For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.",
      "type": "boolean",
      "default": true
    }
  },
  "additionalProperties": false,
  "required": [
    "hostPort",
    "username"
  ]
}