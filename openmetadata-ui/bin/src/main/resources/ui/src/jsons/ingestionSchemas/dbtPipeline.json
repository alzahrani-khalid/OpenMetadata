{
  "$id": "https://open-metadata.org/schema/metadataIngestion/dbtPipeline.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "dbtPipeline",
  "description": "DBT Pipeline Configuration.",
  "type": "object",
  "definitions": {
    "dbtConfigType": {
      "description": "DBT Config Pipeline type",
      "type": "string",
      "enum": [
        "DBT"
      ],
      "default": "DBT"
    }
  },
  "properties": {
    "type": {
      "description": "Pipeline type",
      "default": "DBT",
      "type": "string",
      "enum": [
        "DBT"
      ]
    },
    "dbtConfigSource": {
      "mask": true,
      "title": "DBT Configuration Source",
      "description": "Available sources to fetch DBT catalog and manifest files.",
      "oneOf": [
        {
          "$id": "https://open-metadata.org/schema/metadataIngestion/dbtconfig/dbtCloudConfig.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "DBT Cloud Config",
          "description": "dbt Cloud configuration.",
          "javaType": "org.openmetadata.schema.metadataIngestion.dbtconfig.DbtCloudConfig",
          "type": "object",
          "properties": {
            "dbtCloudAuthToken": {
              "title": "dbt Cloud Authentication Token",
              "description": "dbt cloud account authentication token",
              "type": "string",
              "format": "password"
            },
            "dbtCloudAccountId": {
              "title": "dbt Cloud Account Id",
              "description": "dbt cloud account Id",
              "type": "string"
            },
            "dbtCloudProjectId": {
              "title": "dbt Cloud Project Id",
              "description": "In case of multiple projects in a dbt cloud account, specify the project's id from which you want to extract the dbt run artifacts",
              "type": "string"
            },
            "dbtCloudJobId": {
              "title": "dbt Cloud Job Id",
              "description": "dbt cloud job id.",
              "type": "string"
            },
            "dbtCloudUrl": {
              "title": "dbt Cloud URL",
              "description": "URL to connect to your dbt cloud instance. E.g., https://cloud.getdbt.com or https://emea.dbt.com/",
              "type": "string",
              "format": "uri",
              "default": "https://cloud.getdbt.com"
            }
          },
          "additionalProperties": false,
          "required": [
            "dbtCloudAuthToken",
            "dbtCloudAccountId",
            "dbtCloudUrl"
          ]
        },
        {
          "$id": "https://open-metadata.org/schema/metadataIngestion/dbtconfig/dbtLocalConfig.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "DBT Local Config",
          "description": "DBT Catalog, Manifest and Run Results file path config.",
          "javaType": "org.openmetadata.schema.metadataIngestion.dbtconfig.DbtLocalConfig",
          "type": "object",
          "properties": {
            "dbtCatalogFilePath": {
              "title": "DBT Catalog File Path",
              "description": "DBT catalog file path to extract dbt models with their column schemas.",
              "type": "string"
            },
            "dbtManifestFilePath": {
              "title": "DBT Manifest File Path",
              "description": "DBT manifest file path to extract dbt models and associate with tables.",
              "type": "string"
            },
            "dbtRunResultsFilePath": {
              "title": "DBT Run Results File Path",
              "description": "DBT run results file path to extract the test results information.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": [
            "dbtManifestFilePath"
          ]
        },
        {
          "$id": "https://open-metadata.org/schema/metadataIngestion/dbtconfig/dbtHttpConfig.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "DBT HTTP Config",
          "description": "DBT Catalog, Manifest and Run Results HTTP path configuration.",
          "javaType": "org.openmetadata.schema.metadataIngestion.dbtconfig.DbtHttpConfig",
          "type": "object",
          "properties": {
            "dbtCatalogHttpPath": {
              "title": "DBT Catalog HTTP File Path",
              "description": "DBT catalog http file path to extract dbt models with their column schemas.",
              "type": "string"
            },
            "dbtManifestHttpPath": {
              "title": "DBT Manifest HTTP File Path",
              "description": "DBT manifest http file path to extract dbt models and associate with tables.",
              "type": "string"
            },
            "dbtRunResultsHttpPath": {
              "title": "DBT Run Results HTTP File Path",
              "description": "DBT run results http file path to extract the test results information.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": [
            "dbtManifestHttpPath"
          ]
        },
        {
          "$id": "https://open-metadata.org/schema/metadataIngestion/dbtconfig/dbtS3Config.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "DBT S3 Config",
          "description": "DBT Catalog, Manifest and Run Results files in S3 bucket. We will search for catalog.json, manifest.json and run_results.json.",
          "javaType": "org.openmetadata.schema.metadataIngestion.dbtconfig.DbtS3Config",
          "type": "object",
          "properties": {
            "dbtSecurityConfig": {
              "title": "DBT S3 Security Config",
              "$id": "https://open-metadata.org/schema/security/credentials/awsCredentials.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "description": "AWS credentials configs.",
              "type": "object",
              "javaType": "org.openmetadata.schema.security.credentials.AWSCredentials",
              "properties": {
                "awsAccessKeyId": {
                  "title": "AWS Access Key ID",
                  "description": "AWS Access key ID.",
                  "type": "string"
                },
                "awsSecretAccessKey": {
                  "title": "AWS Secret Access Key",
                  "description": "AWS Secret Access Key.",
                  "type": "string",
                  "format": "password"
                },
                "awsRegion": {
                  "title": "AWS Region",
                  "description": "AWS Region",
                  "type": "string"
                },
                "awsSessionToken": {
                  "title": "AWS Session Token",
                  "description": "AWS Session Token.",
                  "type": "string"
                },
                "endPointURL": {
                  "title": "Endpoint URL",
                  "description": "EndPoint URL for the AWS",
                  "type": "string",
                  "format": "uri"
                },
                "profileName": {
                  "title": "Profile Name",
                  "description": "The name of a profile to use with the boto session.",
                  "type": "string"
                },
                "assumeRoleArn": {
                  "title": "Role Arn for Assume Role",
                  "description": "The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role",
                  "type": "string"
                },
                "assumeRoleSessionName": {
                  "title": "Role Session Name for Assume Role",
                  "description": "An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role",
                  "type": "string",
                  "default": "OpenMetadataSession"
                },
                "assumeRoleSourceIdentity": {
                  "title": "Source Identity for Assume Role",
                  "description": "The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "required": [
                "awsRegion"
              ]
            },
            "dbtPrefixConfig": {
              "title": "DBT Prefix Config",
              "description": "Details of the bucket where the dbt files are stored",
              "type": "object",
              "properties": {
                "dbtBucketName": {
                  "title": "DBT Bucket Name",
                  "description": "Name of the bucket where the dbt files are stored",
                  "type": "string"
                },
                "dbtObjectPrefix": {
                  "title": "DBT Object Prefix",
                  "description": "Path of the folder where the dbt files are stored",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        },
        {
          "$id": "https://open-metadata.org/schema/metadataIngestion/dbtconfig/dbtGCSConfig.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "DBT GCS Config",
          "type": "object",
          "description": "DBT Catalog, Manifest and Run Results files in GCS storage. We will search for catalog.json, manifest.json and run_results.json.",
          "javaType": "org.openmetadata.schema.metadataIngestion.dbtconfig.DbtGCSConfig",
          "properties": {
            "dbtSecurityConfig": {
              "title": "DBT GCS Security Config",
              "$id": "https://open-metadata.org/schema/security/credentials/gcpCredentials.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "description": "GCP credentials configs.",
              "type": "object",
              "javaType": "org.openmetadata.schema.security.credentials.GCPCredentials",
              "definitions": {
                "gcpCredentialsPath": {
                  "title": "GCP Credentials Path",
                  "description": "Pass the path of file containing the GCP credentials info",
                  "type": "string"
                },
                "GCPImpersonateServiceAccountValues": {
                  "title": "GCP impersonate service account values",
                  "description": "Pass the values to impersonate a service account of Google Cloud",
                  "type": "object",
                  "properties": {
                    "impersonateServiceAccount": {
                      "title": "Target Service Account Email",
                      "description": "The impersonated service account email",
                      "type": "string"
                    },
                    "lifetime": {
                      "title": "Lifetime",
                      "description": "Number of seconds the delegated credential should be valid",
                      "type": "integer",
                      "default": 3600
                    }
                  }
                }
              },
              "properties": {
                "gcpConfig": {
                  "title": "GCP Credentials Configuration",
                  "description": "We support two ways of authenticating to GCP i.e via GCP Credentials Values or GCP Credentials Path",
                  "oneOf": [
                    {
                      "$id": "https://open-metadata.org/schema/security/credentials/gcpValues.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.security.credentials.GCPValues",
                      "title": "GCP Credentials Values",
                      "description": "Pass the raw credential values provided by GCP",
                      "definitions": {
                        "singleProjectId": {
                          "title": "Single Project ID",
                          "type": "string"
                        },
                        "multipleProjectId": {
                          "title": "Multiple Project ID",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Credentials Type",
                          "description": "Google Cloud Platform account type.",
                          "type": "string"
                        },
                        "projectId": {
                          "title": "Project ID",
                          "description": "Project ID",
                          "oneOf": [
                            {
                              "title": "Single Project ID",
                              "type": "string"
                            },
                            {
                              "title": "Multiple Project ID",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          ]
                        },
                        "privateKeyId": {
                          "title": "Private Key ID",
                          "description": "Google Cloud private key id.",
                          "type": "string"
                        },
                        "privateKey": {
                          "title": "Private Key",
                          "description": "Google Cloud private key.",
                          "type": "string",
                          "format": "password"
                        },
                        "clientEmail": {
                          "title": "Client Email",
                          "description": "Google Cloud email.",
                          "type": "string"
                        },
                        "clientId": {
                          "title": "Client ID",
                          "description": "Google Cloud Client ID.",
                          "type": "string"
                        },
                        "authUri": {
                          "title": "Authentication URI",
                          "description": "Google Cloud auth uri.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://accounts.google.com/o/oauth2/auth"
                        },
                        "tokenUri": {
                          "title": "Token URI",
                          "description": "Google Cloud token uri.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://oauth2.googleapis.com/token"
                        },
                        "authProviderX509CertUrl": {
                          "title": "Authentication Provider x509 Certificate URL",
                          "description": "Google Cloud auth provider certificate.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://www.googleapis.com/oauth2/v1/certs"
                        },
                        "clientX509CertUrl": {
                          "title": "Client x509 Certificate URL",
                          "description": "Google Cloud client certificate uri.",
                          "type": "string",
                          "format": "uri"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "title": "GCP Credentials Path",
                      "description": "Pass the path of file containing the GCP credentials info",
                      "type": "string"
                    }
                  ]
                },
                "gcpImpersonateServiceAccount": {
                  "title": "GCP Impersonate Service Account Configuration",
                  "description": "we enable the authenticated service account to impersonate another service account",
                  "type": "object",
                  "properties": {
                    "impersonateServiceAccount": {
                      "title": "Target Service Account Email",
                      "description": "The impersonated service account email",
                      "type": "string"
                    },
                    "lifetime": {
                      "title": "Lifetime",
                      "description": "Number of seconds the delegated credential should be valid",
                      "type": "integer",
                      "default": 3600
                    }
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "gcpConfig"
              ]
            },
            "dbtPrefixConfig": {
              "title": "DBT Prefix Config",
              "description": "Details of the bucket where the dbt files are stored",
              "type": "object",
              "properties": {
                "dbtBucketName": {
                  "title": "DBT Bucket Name",
                  "description": "Name of the bucket where the dbt files are stored",
                  "type": "string"
                },
                "dbtObjectPrefix": {
                  "title": "DBT Object Prefix",
                  "description": "Path of the folder where the dbt files are stored",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        },
        {
          "$id": "https://open-metadata.org/schema/metadataIngestion/dbtconfig/dbtAzureConfig.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "DBT Azure Config",
          "type": "object",
          "description": "DBT Catalog, Manifest and Run Results files in Azure bucket. We will search for catalog.json, manifest.json and run_results.json.",
          "javaType": "org.openmetadata.schema.metadataIngestion.dbtconfig.DbtAzureConfig",
          "properties": {
            "dbtSecurityConfig": {
              "title": "DBT Azure Security Config",
              "$id": "https://open-metadata.org/schema/security/credentials/azureCredentials.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "description": "Azure Datalake Credentials",
              "type": "object",
              "javaType": "org.openmetadata.schema.security.credentials.AzureCredentials",
              "properties": {
                "clientId": {
                  "title": "Client ID",
                  "description": "Your Service Principal App ID (Client ID)",
                  "type": "string"
                },
                "clientSecret": {
                  "title": "Client Secret",
                  "description": "Your Service Principal Password (Client Secret)",
                  "type": "string",
                  "format": "password"
                },
                "tenantId": {
                  "title": "Tenant ID",
                  "description": "Tenant ID of your Azure Subscription",
                  "type": "string"
                },
                "accountName": {
                  "title": "Account Name",
                  "description": "Account Name of your storage account",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "required": [
                "clientId",
                "clientSecret",
                "tenantId",
                "accountName"
              ]
            },
            "dbtPrefixConfig": {
              "title": "DBT Prefix Config",
              "description": "Details of the bucket where the dbt files are stored",
              "type": "object",
              "properties": {
                "dbtBucketName": {
                  "title": "DBT Bucket Name",
                  "description": "Name of the bucket where the dbt files are stored",
                  "type": "string"
                },
                "dbtObjectPrefix": {
                  "title": "DBT Object Prefix",
                  "description": "Path of the folder where the dbt files are stored",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        }
      ]
    },
    "dbtUpdateDescriptions": {
      "description": "Optional configuration to update the description from DBT or not",
      "type": "boolean",
      "default": false
    },
    "includeTags": {
      "description": "Optional configuration to toggle the tags ingestion.",
      "type": "boolean",
      "default": true
    },
    "dbtClassificationName": {
      "title": "dbt Classification Name",
      "description": "Custom OpenMetadata Classification name for dbt tags.",
      "type": "string",
      "default": "dbtTags"
    },
    "schemaFilterPattern": {
      "description": "Regex to only fetch tables or databases that matches the pattern.",
      "title": "Schema Filter Pattern",
      "type": "object",
      "javaType": "org.openmetadata.schema.metadataIngestion.FilterPattern",
      "properties": {
        "includes": {
          "description": "List of strings/regex patterns to match and include only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "excludes": {
          "description": "List of strings/regex patterns to match and exclude only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "additionalProperties": false
    },
    "tableFilterPattern": {
      "description": "Regex exclude tables or databases that matches the pattern.",
      "title": "Table Filter Pattern",
      "type": "object",
      "javaType": "org.openmetadata.schema.metadataIngestion.FilterPattern",
      "properties": {
        "includes": {
          "description": "List of strings/regex patterns to match and include only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "excludes": {
          "description": "List of strings/regex patterns to match and exclude only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "additionalProperties": false
    },
    "parsingTimeoutLimit": {
      "description": "Configuration to set the timeout for parsing the query in seconds.",
      "type": "integer",
      "default": 300,
      "title": "Parsing Timeout Limit (in sec.)"
    },
    "databaseFilterPattern": {
      "description": "Regex to only fetch databases that matches the pattern.",
      "title": "Database Filter Pattern",
      "type": "object",
      "javaType": "org.openmetadata.schema.metadataIngestion.FilterPattern",
      "properties": {
        "includes": {
          "description": "List of strings/regex patterns to match and include only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "excludes": {
          "description": "List of strings/regex patterns to match and exclude only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false
}