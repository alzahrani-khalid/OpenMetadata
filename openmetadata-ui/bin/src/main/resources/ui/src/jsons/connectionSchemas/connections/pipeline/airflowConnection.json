{
  "$id": "https://open-metadata.org/schema/entity/services/connections/pipeline/airflowConnection.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AirflowConnection",
  "description": "Airflow Metadata Database Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.pipeline.AirflowConnection",
  "definitions": {
    "AirflowType": {
      "description": "Service type.",
      "type": "string",
      "enum": [
        "Airflow"
      ],
      "default": "Airflow"
    }
  },
  "properties": {
    "type": {
      "title": "Service Type",
      "description": "Service Type",
      "default": "Airflow",
      "type": "string",
      "enum": [
        "Airflow"
      ]
    },
    "hostPort": {
      "expose": true,
      "title": "Host And Port",
      "description": "Pipeline Service Management/UI URI.",
      "type": "string",
      "format": "uri"
    },
    "numberOfStatus": {
      "description": "Pipeline Service Number Of Status",
      "type": "integer",
      "default": "10"
    },
    "connection": {
      "title": "Metadata Database Connection",
      "description": "Underlying database connection. See https://airflow.apache.org/docs/apache-airflow/stable/howto/set-up-database.html for supported backends.",
      "oneOf": [
        {
          "$id": "https://open-metadata.org/schema/entity/services/connections/pipeline/backendConnection.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "BackendConnection",
          "description": "Lineage Backend Connection Config",
          "type": "object",
          "javaType": "org.openmetadata.schema.services.connections.pipeline.BackendConnection",
          "definitions": {
            "BackendType": {
              "description": "Service type.",
              "type": "string",
              "enum": [
                "Backend"
              ],
              "default": "Backend"
            }
          },
          "properties": {
            "type": {
              "title": "Service Type",
              "description": "Service Type",
              "default": "Backend",
              "type": "string",
              "enum": [
                "Backend"
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "$id": "https://open-metadata.org/schema/entity/services/connections/database/mysqlConnection.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "MysqlConnection",
          "description": "Mysql Database Connection Config",
          "type": "object",
          "javaType": "org.openmetadata.schema.services.connections.database.MysqlConnection",
          "definitions": {
            "mySQLType": {
              "description": "Service type.",
              "type": "string",
              "enum": [
                "Mysql"
              ],
              "default": "Mysql"
            },
            "mySQLScheme": {
              "description": "SQLAlchemy driver scheme options.",
              "type": "string",
              "enum": [
                "mysql+pymysql"
              ],
              "default": "mysql+pymysql"
            }
          },
          "properties": {
            "type": {
              "title": "Service Type",
              "description": "Service Type",
              "default": "Mysql",
              "type": "string",
              "enum": [
                "Mysql"
              ]
            },
            "scheme": {
              "title": "Connection Scheme",
              "description": "SQLAlchemy driver scheme options.",
              "default": "mysql+pymysql",
              "type": "string",
              "enum": [
                "mysql+pymysql"
              ]
            },
            "username": {
              "title": "Username",
              "description": "Username to connect to MySQL. This user should have privileges to read all the metadata in Mysql.",
              "type": "string"
            },
            "authType": {
              "title": "Auth Configuration Type",
              "description": "Choose Auth Config Type.",
              "oneOf": [
                {
                  "$id": "https://open-metadata.org/schema/entity/services/connections/database/common/basicAuth.json",
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Basic Auth",
                  "description": "Common Database Connection Config",
                  "javaType": "org.openmetadata.schema.services.connections.database.common.basicAuth",
                  "type": "object",
                  "properties": {
                    "password": {
                      "title": "Password",
                      "description": "Password to connect to source.",
                      "type": "string",
                      "format": "password"
                    }
                  },
                  "additionalProperties": false
                },
                {
                  "$id": "https://open-metadata.org/schema/entity/services/connections/database/common/iamAuthConfig.json",
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "IAM Auth Configuration Source",
                  "description": "IAM Auth Database Connection Config",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.services.connections.database.common.IamAuthConfig",
                  "properties": {
                    "awsConfig": {
                      "title": "AWS Credentials Configuration",
                      "$id": "https://open-metadata.org/schema/security/credentials/awsCredentials.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "description": "AWS credentials configs.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.security.credentials.AWSCredentials",
                      "properties": {
                        "awsAccessKeyId": {
                          "title": "AWS Access Key ID",
                          "description": "AWS Access key ID.",
                          "type": "string"
                        },
                        "awsSecretAccessKey": {
                          "title": "AWS Secret Access Key",
                          "description": "AWS Secret Access Key.",
                          "type": "string",
                          "format": "password"
                        },
                        "awsRegion": {
                          "title": "AWS Region",
                          "description": "AWS Region",
                          "type": "string"
                        },
                        "awsSessionToken": {
                          "title": "AWS Session Token",
                          "description": "AWS Session Token.",
                          "type": "string"
                        },
                        "endPointURL": {
                          "title": "Endpoint URL",
                          "description": "EndPoint URL for the AWS",
                          "type": "string",
                          "format": "uri"
                        },
                        "profileName": {
                          "title": "Profile Name",
                          "description": "The name of a profile to use with the boto session.",
                          "type": "string"
                        },
                        "assumeRoleArn": {
                          "title": "Role Arn for Assume Role",
                          "description": "The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role",
                          "type": "string"
                        },
                        "assumeRoleSessionName": {
                          "title": "Role Session Name for Assume Role",
                          "description": "An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role",
                          "type": "string",
                          "default": "OpenMetadataSession"
                        },
                        "assumeRoleSourceIdentity": {
                          "title": "Source Identity for Assume Role",
                          "description": "The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsRegion"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "hostPort": {
              "title": "Host and Port",
              "description": "Host and port of the MySQL service.",
              "type": "string"
            },
            "databaseName": {
              "title": "Database Name",
              "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
              "type": "string"
            },
            "databaseSchema": {
              "title": "Database Schema",
              "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
              "type": "string"
            },
            "sslCA": {
              "title": "SSL CA",
              "description": "Provide the path to ssl ca file",
              "type": "string"
            },
            "sslCert": {
              "title": "SSL Client Certificate File",
              "description": "Provide the path to ssl client certificate file (ssl_cert)",
              "type": "string"
            },
            "sslKey": {
              "title": "SSL Client Key File",
              "description": "Provide the path to ssl client certificate file (ssl_key)",
              "type": "string"
            },
            "connectionOptions": {
              "title": "Connection Options",
              "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
              "description": "Additional connection options to build the URL that can be sent to service during the connection.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "connectionArguments": {
              "title": "Connection Arguments",
              "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
              "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
              "type": "object",
              "additionalProperties": {
                ".{1,}": {
                  "type": "string"
                }
              }
            },
            "supportsMetadataExtraction": {
              "title": "Supports Metadata Extraction",
              "description": "Supports Metadata Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsDBTExtraction": {
              "description": "Supports DBT Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsProfiler": {
              "title": "Supports Profiler",
              "description": "Supports Profiler",
              "type": "boolean",
              "default": true
            },
            "supportsQueryComment": {
              "title": "Supports Query Comment",
              "description": "For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.",
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false,
          "required": [
            "hostPort",
            "username"
          ]
        },
        {
          "$id": "https://open-metadata.org/schema/entity/services/connections/database/postgresConnection.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "PostgresConnection",
          "description": "Postgres Database Connection Config",
          "type": "object",
          "javaType": "org.openmetadata.schema.services.connections.database.PostgresConnection",
          "definitions": {
            "postgresType": {
              "description": "Service type.",
              "type": "string",
              "enum": [
                "Postgres"
              ],
              "default": "Postgres"
            },
            "postgresScheme": {
              "description": "SQLAlchemy driver scheme options.",
              "type": "string",
              "enum": [
                "postgresql+psycopg2",
                "pgspider+psycopg2"
              ],
              "default": "postgresql+psycopg2"
            }
          },
          "properties": {
            "type": {
              "title": "Service Type",
              "description": "Service Type",
              "default": "Postgres",
              "type": "string",
              "enum": [
                "Postgres"
              ]
            },
            "scheme": {
              "title": "Connection Scheme",
              "description": "SQLAlchemy driver scheme options.",
              "default": "postgresql+psycopg2",
              "type": "string",
              "enum": [
                "postgresql+psycopg2",
                "pgspider+psycopg2"
              ]
            },
            "username": {
              "title": "Username",
              "description": "Username to connect to Postgres. This user should have privileges to read all the metadata in Postgres.",
              "type": "string"
            },
            "authType": {
              "title": "Auth Configuration Type",
              "description": "Choose Auth Config Type.",
              "oneOf": [
                {
                  "$id": "https://open-metadata.org/schema/entity/services/connections/database/common/basicAuth.json",
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Basic Auth",
                  "description": "Common Database Connection Config",
                  "javaType": "org.openmetadata.schema.services.connections.database.common.basicAuth",
                  "type": "object",
                  "properties": {
                    "password": {
                      "title": "Password",
                      "description": "Password to connect to source.",
                      "type": "string",
                      "format": "password"
                    }
                  },
                  "additionalProperties": false
                },
                {
                  "$id": "https://open-metadata.org/schema/entity/services/connections/database/common/iamAuthConfig.json",
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "IAM Auth Configuration Source",
                  "description": "IAM Auth Database Connection Config",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.services.connections.database.common.IamAuthConfig",
                  "properties": {
                    "awsConfig": {
                      "title": "AWS Credentials Configuration",
                      "$id": "https://open-metadata.org/schema/security/credentials/awsCredentials.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "description": "AWS credentials configs.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.security.credentials.AWSCredentials",
                      "properties": {
                        "awsAccessKeyId": {
                          "title": "AWS Access Key ID",
                          "description": "AWS Access key ID.",
                          "type": "string"
                        },
                        "awsSecretAccessKey": {
                          "title": "AWS Secret Access Key",
                          "description": "AWS Secret Access Key.",
                          "type": "string",
                          "format": "password"
                        },
                        "awsRegion": {
                          "title": "AWS Region",
                          "description": "AWS Region",
                          "type": "string"
                        },
                        "awsSessionToken": {
                          "title": "AWS Session Token",
                          "description": "AWS Session Token.",
                          "type": "string"
                        },
                        "endPointURL": {
                          "title": "Endpoint URL",
                          "description": "EndPoint URL for the AWS",
                          "type": "string",
                          "format": "uri"
                        },
                        "profileName": {
                          "title": "Profile Name",
                          "description": "The name of a profile to use with the boto session.",
                          "type": "string"
                        },
                        "assumeRoleArn": {
                          "title": "Role Arn for Assume Role",
                          "description": "The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role",
                          "type": "string"
                        },
                        "assumeRoleSessionName": {
                          "title": "Role Session Name for Assume Role",
                          "description": "An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role",
                          "type": "string",
                          "default": "OpenMetadataSession"
                        },
                        "assumeRoleSourceIdentity": {
                          "title": "Source Identity for Assume Role",
                          "description": "The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsRegion"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "hostPort": {
              "title": "Host and Port",
              "description": "Host and port of the source service.",
              "type": "string"
            },
            "database": {
              "title": "Database",
              "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
              "type": "string"
            },
            "ingestAllDatabases": {
              "title": "Ingest All Databases",
              "description": "Ingest data from all databases in Postgres. You can use databaseFilterPattern on top of this.",
              "type": "boolean",
              "default": false
            },
            "sslMode": {
              "title": "SSL Mode",
              "description": "SSL Mode to connect to postgres database.",
              "enum": [
                "disable",
                "allow",
                "prefer",
                "require",
                "verify-ca",
                "verify-full"
              ],
              "default": "disable"
            },
            "sslConfig": {
              "title": "SSL Config",
              "description": "Client SSL configuration",
              "javaType": "org.openmetadata.schema.security.ssl.SSLConfig",
              "oneOf": [
                {
                  "$id": "https://open-metadata.org/schema/security/ssl/validateSSLClientConfig.json",
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Validate SSL Client Config",
                  "description": "OpenMetadata Client configured to validate SSL certificates.",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.security.ssl.ValidateSSLClientConfig",
                  "properties": {
                    "certificatePath": {
                      "title": "Certificate Path",
                      "description": "CA certificate path. E.g., /path/to/public.cert. Will be used if Verify SSL is set to `validate`.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "classificationName": {
              "title": "Classification Name",
              "description": "Custom OpenMetadata Classification name for Postgres policy tags.",
              "type": "string",
              "default": "PostgresPolicyTags"
            },
            "connectionOptions": {
              "title": "Connection Options",
              "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
              "description": "Additional connection options to build the URL that can be sent to service during the connection.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "connectionArguments": {
              "title": "Connection Arguments",
              "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
              "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
              "type": "object",
              "additionalProperties": {
                ".{1,}": {
                  "type": "string"
                }
              }
            },
            "supportsMetadataExtraction": {
              "title": "Supports Metadata Extraction",
              "description": "Supports Metadata Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsUsageExtraction": {
              "description": "Supports Usage Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsLineageExtraction": {
              "description": "Supports Lineage Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsDBTExtraction": {
              "description": "Supports DBT Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsProfiler": {
              "title": "Supports Profiler",
              "description": "Supports Profiler",
              "type": "boolean",
              "default": true
            },
            "supportsDatabase": {
              "title": "Supports Database",
              "description": "The source service supports the database concept in its hierarchy",
              "type": "boolean",
              "default": true
            },
            "supportsQueryComment": {
              "title": "Supports Query Comment",
              "description": "For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.",
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false,
          "required": [
            "hostPort",
            "username",
            "database"
          ]
        },
        {
          "$id": "https://open-metadata.org/schema/entity/services/connections/database/mssqlConnection.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "MssqlConnection",
          "description": "Mssql Database Connection Config",
          "type": "object",
          "javaType": "org.openmetadata.schema.services.connections.database.MssqlConnection",
          "definitions": {
            "mssqlType": {
              "description": "Service type.",
              "type": "string",
              "enum": [
                "Mssql"
              ],
              "default": "Mssql"
            },
            "mssqlScheme": {
              "description": "SQLAlchemy driver scheme options.",
              "type": "string",
              "enum": [
                "mssql+pyodbc",
                "mssql+pytds",
                "mssql+pymssql"
              ],
              "default": "mssql+pytds"
            }
          },
          "properties": {
            "type": {
              "title": "Service Type",
              "description": "Service Type",
              "default": "Mssql",
              "type": "string",
              "enum": [
                "Mssql"
              ]
            },
            "scheme": {
              "title": "Connection Scheme",
              "description": "SQLAlchemy driver scheme options.",
              "default": "mssql+pytds",
              "type": "string",
              "enum": [
                "mssql+pyodbc",
                "mssql+pytds",
                "mssql+pymssql"
              ]
            },
            "username": {
              "title": "Username",
              "description": "Username to connect to MSSQL. This user should have privileges to read all the metadata in MsSQL.",
              "type": "string"
            },
            "password": {
              "title": "Password",
              "description": "Password to connect to MSSQL.",
              "type": "string",
              "format": "password"
            },
            "hostPort": {
              "title": "Host and Port",
              "description": "Host and port of the MSSQL service.",
              "type": "string"
            },
            "database": {
              "title": "Database",
              "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
              "type": "string"
            },
            "driver": {
              "title": "Driver",
              "description": "ODBC driver version in case of pyodbc connection.",
              "type": "string",
              "default": "ODBC Driver 18 for SQL Server"
            },
            "ingestAllDatabases": {
              "title": "Ingest All Databases",
              "description": "Ingest data from all databases in Mssql. You can use databaseFilterPattern on top of this.",
              "type": "boolean",
              "default": false
            },
            "connectionOptions": {
              "title": "Connection Options",
              "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
              "description": "Additional connection options to build the URL that can be sent to service during the connection.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "connectionArguments": {
              "title": "Connection Arguments",
              "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
              "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
              "type": "object",
              "additionalProperties": {
                ".{1,}": {
                  "type": "string"
                }
              }
            },
            "supportsMetadataExtraction": {
              "title": "Supports Metadata Extraction",
              "description": "Supports Metadata Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsDBTExtraction": {
              "description": "Supports DBT Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsProfiler": {
              "title": "Supports Profiler",
              "description": "Supports Profiler",
              "type": "boolean",
              "default": true
            },
            "supportsDatabase": {
              "title": "Supports Database",
              "description": "The source service supports the database concept in its hierarchy",
              "type": "boolean",
              "default": true
            },
            "supportsUsageExtraction": {
              "description": "Supports Usage Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsLineageExtraction": {
              "description": "Supports Lineage Extraction.",
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false,
          "required": [
            "database"
          ]
        },
        {
          "$id": "https://open-metadata.org/schema/entity/services/connections/database/sqliteConnection.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "SQLiteConnection",
          "description": "SQLite Database Connection Config",
          "type": "object",
          "javaType": "org.openmetadata.schema.services.connections.database.SQLiteConnection",
          "definitions": {
            "SQLiteType": {
              "description": "Service type.",
              "type": "string",
              "enum": [
                "SQLite"
              ],
              "default": "SQLite"
            },
            "SQLiteScheme": {
              "description": "SQLAlchemy driver scheme options.",
              "type": "string",
              "enum": [
                "sqlite+pysqlite"
              ],
              "default": "sqlite+pysqlite"
            }
          },
          "properties": {
            "type": {
              "title": "Service Type",
              "description": "Service Type",
              "default": "SQLite",
              "type": "string",
              "enum": [
                "SQLite"
              ]
            },
            "scheme": {
              "title": "Connection Scheme",
              "description": "SQLAlchemy driver scheme options.",
              "default": "sqlite+pysqlite",
              "type": "string",
              "enum": [
                "sqlite+pysqlite"
              ]
            },
            "username": {
              "title": "Username",
              "description": "Username to connect to SQLite. Blank for in-memory database.",
              "type": "string"
            },
            "password": {
              "title": "Password",
              "description": "Password to connect to SQLite. Blank for in-memory database.",
              "type": "string",
              "format": "password"
            },
            "hostPort": {
              "title": "Host and Port",
              "description": "Host and port of the SQLite service. Blank for in-memory database.",
              "type": "string"
            },
            "database": {
              "title": "Database",
              "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
              "type": "string"
            },
            "databaseMode": {
              "title": "Database Mode",
              "description": "How to run the SQLite database. :memory: by default.",
              "type": "string",
              "default": ":memory:"
            },
            "connectionOptions": {
              "title": "Connection Options",
              "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
              "description": "Additional connection options to build the URL that can be sent to service during the connection.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "connectionArguments": {
              "title": "Connection Arguments",
              "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
              "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
              "type": "object",
              "additionalProperties": {
                ".{1,}": {
                  "type": "string"
                }
              }
            },
            "supportsMetadataExtraction": {
              "title": "Supports Metadata Extraction",
              "description": "Supports Metadata Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsDBTExtraction": {
              "description": "Supports DBT Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsProfiler": {
              "title": "Supports Profiler",
              "description": "Supports Profiler",
              "type": "boolean",
              "default": true
            },
            "supportsQueryComment": {
              "title": "Supports Query Comment",
              "description": "For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.",
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "supportsMetadataExtraction": {
      "title": "Supports Metadata Extraction",
      "description": "Supports Metadata Extraction.",
      "type": "boolean",
      "default": true
    }
  },
  "additionalProperties": false,
  "required": [
    "hostPort",
    "connection"
  ]
}