{
  "$id": "https://open-metadata.org/schema/metadataIngestion/workflow.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MetadataWorkflow",
  "description": "OpenMetadata Ingestion Framework definition.",
  "type": "object",
  "definitions": {
    "sourceConfig": {
      "description": "Additional connection configuration.",
      "javaType": "org.openmetadata.schema.metadataIngestion.SourceConfig",
      "type": "object",
      "properties": {
        "config": {
          "oneOf": [
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/databaseServiceMetadataPipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "DatabaseServiceMetadataPipeline",
              "description": "DatabaseService Metadata Pipeline Configuration.",
              "type": "object",
              "javaType": "org.openmetadata.schema.metadataIngestion.DatabaseServiceMetadataPipeline",
              "definitions": {
                "databaseMetadataConfigType": {
                  "description": "Database Source Config Metadata Pipeline type",
                  "type": "string",
                  "enum": [
                    "DatabaseMetadata"
                  ],
                  "default": "DatabaseMetadata"
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/0/definitions/databaseMetadataConfigType",
                  "default": "DatabaseMetadata"
                },
                "markDeletedTables": {
                  "description": "This is an optional configuration for enabling soft deletion of tables. When this option is enabled, only tables that have been deleted from the source will be soft deleted, and this will apply solely to the schema that is currently being ingested via the pipeline. Any related entities such as test suites or lineage information that were associated with those tables will also be deleted.",
                  "type": "boolean",
                  "default": true,
                  "title": "Mark Deleted Tables"
                },
                "includeTables": {
                  "description": "Optional configuration to turn off fetching metadata for tables.",
                  "type": "boolean",
                  "default": true,
                  "title": "Include Tables"
                },
                "includeViews": {
                  "description": "Optional configuration to turn off fetching metadata for views.",
                  "type": "boolean",
                  "default": true,
                  "title": "Include Views"
                },
                "includeTags": {
                  "description": "Optional configuration to toggle the tags ingestion.",
                  "type": "boolean",
                  "default": true,
                  "title": "Include Tags"
                },
                "includeStoredProcedures": {
                  "description": "Optional configuration to toggle the Stored Procedures ingestion.",
                  "type": "boolean",
                  "default": true,
                  "title": "Include Stored Procedures"
                },
                "queryLogDuration": {
                  "description": "Configuration to tune how far we want to look back in query logs to process Stored Procedures results.",
                  "type": "integer",
                  "default": 1,
                  "title": "Query Log Duration"
                },
                "queryParsingTimeoutLimit": {
                  "description": "Configuration to set the timeout for parsing the query in seconds.",
                  "type": "integer",
                  "default": 300,
                  "title": "Query Parsing Timeout Limit"
                },
                "useFqnForFiltering": {
                  "description": "Regex will be applied on fully qualified name (e.g service_name.db_name.schema_name.table_name) instead of raw name (e.g. table_name)",
                  "type": "boolean",
                  "default": false,
                  "title": "Use FQN For Filtering"
                },
                "schemaFilterPattern": {
                  "description": "Regex to only fetch tables or databases that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Schema Filter Pattern"
                },
                "tableFilterPattern": {
                  "description": "Regex exclude tables or databases that matches the pattern.",
                  "title": "Table Filter Pattern",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.metadataIngestion.FilterPattern",
                  "properties": {
                    "includes": {
                      "description": "List of strings/regex patterns to match and include only database entities that match.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "excludes": {
                      "description": "List of strings/regex patterns to match and exclude only database entities that match.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    }
                  },
                  "additionalProperties": false
                },
                "databaseFilterPattern": {
                  "description": "Regex to only fetch databases that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Database Filter Pattern"
                }
              },
              "additionalProperties": false
            },
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/databaseServiceQueryUsagePipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "DatabaseServiceQueryUsagePipeline",
              "description": "DatabaseService Query Usage Pipeline Configuration.",
              "type": "object",
              "definitions": {
                "databaseUsageConfigType": {
                  "description": "Database Source Config Usage Pipeline type",
                  "type": "string",
                  "enum": [
                    "DatabaseUsage"
                  ],
                  "default": "DatabaseUsage"
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/1/definitions/databaseUsageConfigType",
                  "default": "DatabaseUsage"
                },
                "queryLogDuration": {
                  "description": "Configuration to tune how far we want to look back in query logs to process usage data.",
                  "type": "integer",
                  "default": 1,
                  "title": "Query Log Duration"
                },
                "stageFileLocation": {
                  "description": "Temporary file name to store the query logs before processing. Absolute file path required.",
                  "type": "string",
                  "default": "/tmp/query_log",
                  "title": "Stage File Location"
                },
                "filterCondition": {
                  "description": "Configuration the condition to filter the query history.",
                  "type": "string",
                  "title": "Filter Condition"
                },
                "resultLimit": {
                  "description": "Configuration to set the limit for query logs",
                  "type": "integer",
                  "default": 1000,
                  "title": "Result Limit"
                },
                "queryLogFilePath": {
                  "description": "Configuration to set the file path for query logs",
                  "type": "string",
                  "title": "Query Log File Path"
                }
              },
              "additionalProperties": false
            },
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/databaseServiceQueryLineagePipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "DatabaseServiceQueryLineagePipeline",
              "description": "DatabaseService Query Lineage Pipeline Configuration.",
              "type": "object",
              "definitions": {
                "databaseLineageConfigType": {
                  "description": "Database Source Config Usage Pipeline type",
                  "type": "string",
                  "enum": [
                    "DatabaseLineage"
                  ],
                  "default": "DatabaseLineage"
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/2/definitions/databaseLineageConfigType",
                  "default": "DatabaseLineage"
                },
                "queryLogDuration": {
                  "description": "Configuration to tune how far we want to look back in query logs to process lineage data.",
                  "type": "integer",
                  "default": 1,
                  "title": "Query Log Duration"
                },
                "queryLogFilePath": {
                  "description": "Configuration to set the file path for query logs",
                  "type": "string",
                  "title": "Query Log File Path"
                },
                "resultLimit": {
                  "description": "Configuration to set the limit for query logs",
                  "type": "integer",
                  "default": 1000,
                  "title": "Result Limit"
                },
                "parsingTimeoutLimit": {
                  "description": "Configuration to set the timeout for parsing the query in seconds.",
                  "type": "integer",
                  "default": 300,
                  "title": "Parsing Timeout Limit"
                },
                "filterCondition": {
                  "description": "Configuration the condition to filter the query history.",
                  "type": "string",
                  "title": "Filter Condition"
                },
                "schemaFilterPattern": {
                  "description": "Regex to only fetch tables or databases that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Schema Filter Pattern"
                },
                "tableFilterPattern": {
                  "description": "Regex exclude tables or databases that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Table Filter Pattern"
                },
                "databaseFilterPattern": {
                  "description": "Regex to only fetch databases that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Database Filter Pattern"
                }
              },
              "additionalProperties": false
            },
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/dashboardServiceMetadataPipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "DashboardServiceMetadataPipeline",
              "type": "object",
              "description": "DashboardService Metadata Pipeline Configuration.",
              "definitions": {
                "dashboardMetadataConfigType": {
                  "description": "Dashboard Source Config Metadata Pipeline type",
                  "type": "string",
                  "enum": [
                    "DashboardMetadata"
                  ],
                  "default": "DashboardMetadata"
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/3/definitions/dashboardMetadataConfigType",
                  "default": "DashboardMetadata"
                },
                "dashboardFilterPattern": {
                  "description": "Regex to exclude or include dashboards that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Dashboard Filter Pattern"
                },
                "chartFilterPattern": {
                  "description": "Regex exclude or include charts that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Chart Filter Pattern"
                },
                "dataModelFilterPattern": {
                  "description": "Regex exclude or include data models that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Data Model Filter Pattern"
                },
                "projectFilterPattern": {
                  "description": "Regex to exclude or include projects that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Project Filter Pattern"
                },
                "dbServiceNames": {
                  "title": "Database Service Names List",
                  "description": "List of Database Service Names for creation of lineage",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "includeOwners": {
                  "title": "Include Current Owners",
                  "description": "Enabling a flag will replace the current owner with a new owner from the source during metadata ingestion, if the current owner is null. It is recommended to keep the flag enabled to obtain the owner information during the first metadata ingestion.",
                  "type": "boolean",
                  "default": false
                },
                "markDeletedDashboards": {
                  "description": "Optional configuration to soft delete dashboards in OpenMetadata if the source dashboards are deleted. Also, if the dashboard is deleted, all the associated entities like lineage, etc., with that dashboard will be deleted",
                  "type": "boolean",
                  "default": true,
                  "title": "Mark Deleted Dashboards"
                },
                "includeTags": {
                  "description": "Optional configuration to toggle the tags ingestion.",
                  "type": "boolean",
                  "default": true,
                  "title": "Include Tags"
                },
                "includeDataModels": {
                  "description": "Optional configuration to toggle the ingestion of data models.",
                  "type": "boolean",
                  "default": true,
                  "title": "Include Data Models"
                }
              },
              "additionalProperties": false
            },
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/messagingServiceMetadataPipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "MessagingServiceMetadataPipeline",
              "description": "MessagingService Metadata Pipeline Configuration.",
              "type": "object",
              "definitions": {
                "messagingMetadataConfigType": {
                  "description": "Messaging Source Config Metadata Pipeline type",
                  "type": "string",
                  "enum": [
                    "MessagingMetadata"
                  ],
                  "default": "MessagingMetadata"
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/4/definitions/messagingMetadataConfigType",
                  "default": "MessagingMetadata"
                },
                "topicFilterPattern": {
                  "description": "Regex to only fetch topics that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Topic Filter Pattern"
                },
                "generateSampleData": {
                  "description": "Option to turn on/off generating sample data during metadata extraction.",
                  "type": "boolean",
                  "default": false,
                  "title": "Generate Sample Data"
                },
                "markDeletedTopics": {
                  "description": "Optional configuration to soft delete topics in OpenMetadata if the source topics are deleted. Also, if the topic is deleted, all the associated entities like sample data, lineage, etc., with that topic will be deleted",
                  "type": "boolean",
                  "default": true,
                  "title": "Mark Deleted Topics"
                }
              },
              "additionalProperties": false
            },
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/databaseServiceProfilerPipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "DatabaseServiceProfilerPipeline",
              "description": "DatabaseService Profiler Pipeline Configuration.",
              "type": "object",
              "definitions": {
                "profilerConfigType": {
                  "description": "Profiler Source Config Pipeline type",
                  "type": "string",
                  "enum": [
                    "Profiler"
                  ],
                  "default": "Profiler"
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/5/definitions/profilerConfigType",
                  "default": "Profiler"
                },
                "schemaFilterPattern": {
                  "description": "Regex to only fetch tables or databases that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Schema Filter Pattern"
                },
                "tableFilterPattern": {
                  "description": "Regex exclude tables or databases that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Table Filter Pattern"
                },
                "databaseFilterPattern": {
                  "description": "Regex to only fetch databases that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Database Filter Pattern"
                },
                "includeViews": {
                  "description": "Optional configuration to turn off fetching metadata for views.",
                  "type": "boolean",
                  "default": true,
                  "title": "Include Views"
                },
                "processPiiSensitive": {
                  "description": "Optional configuration to automatically tag columns that might contain sensitive information",
                  "type": "boolean",
                  "default": false,
                  "title": "Auto Tag PII"
                },
                "confidence": {
                  "description": "Set the Confidence value for which you want the column to be marked",
                  "type": "number",
                  "default": 80,
                  "title": "Confidence"
                },
                "generateSampleData": {
                  "description": "Option to turn on/off generating sample data.",
                  "type": "boolean",
                  "default": true,
                  "title": "Generate Sample Data"
                },
                "profileSample": {
                  "description": "Percentage of data or no. of rows we want to execute the profiler and tests on",
                  "type": "number",
                  "default": null,
                  "title": "Profile Sample"
                },
                "profileSampleType": {
                  "title": "Profile Sample Type",
                  "description": "Type of Profile Sample (percentage or rows)",
                  "type": "string",
                  "enum": [
                    "PERCENTAGE",
                    "ROWS"
                  ],
                  "default": "PERCENTAGE"
                },
                "threadCount": {
                  "description": "Number of threads to use during metric computations",
                  "type": "number",
                  "default": 5,
                  "title": "Thread Count"
                },
                "timeoutSeconds": {
                  "description": "Profiler Timeout in Seconds",
                  "type": "integer",
                  "default": 43200,
                  "title": "Timeout (in sec.)"
                }
              },
              "additionalProperties": false
            },
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/pipelineServiceMetadataPipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "PipelineServiceMetadataPipeline",
              "description": "PipelineService Metadata Pipeline Configuration.",
              "type": "object",
              "definitions": {
                "pipelineMetadataConfigType": {
                  "description": "Pipeline Source Config Metadata Pipeline type",
                  "type": "string",
                  "enum": [
                    "PipelineMetadata"
                  ],
                  "default": "PipelineMetadata"
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/6/definitions/pipelineMetadataConfigType",
                  "default": "PipelineMetadata"
                },
                "includeLineage": {
                  "description": "Optional configuration to turn off fetching lineage from pipelines.",
                  "type": "boolean",
                  "default": true,
                  "title": "Include Lineage"
                },
                "includeOwners": {
                  "description": "Set the 'Include Owners' toggle to control whether to include owners to the ingested entity if the owner email matches with a user stored in the OM server as part of metadata ingestion. If the ingested entity already exists and has an owner, the owner will not be overwritten.",
                  "type": "boolean",
                  "default": true,
                  "title": "Include Owners"
                },
                "pipelineFilterPattern": {
                  "description": "Regex exclude pipelines.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Pipeline Filter Pattern"
                },
                "dbServiceNames": {
                  "title": "Database Service Names List",
                  "description": "List of Database Service Names for creation of lineage",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "markDeletedPipelines": {
                  "description": "Optional configuration to soft delete Pipelines in OpenMetadata if the source Pipelines are deleted. Also, if the Pipeline is deleted, all the associated entities like lineage, etc., with that Pipeline will be deleted",
                  "type": "boolean",
                  "default": true,
                  "title": "Mark Deleted Pipeline"
                },
                "includeTags": {
                  "description": "Optional configuration to toggle the tags ingestion.",
                  "type": "boolean",
                  "default": true,
                  "title": "Include Tags"
                }
              },
              "additionalProperties": false
            },
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/mlmodelServiceMetadataPipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "MlModelServiceMetadataPipeline",
              "description": "MlModelService Metadata Pipeline Configuration.",
              "type": "object",
              "definitions": {
                "mlModelMetadataConfigType": {
                  "description": "MlModel Source Config Metadata Pipeline type",
                  "type": "string",
                  "enum": [
                    "MlModelMetadata"
                  ],
                  "default": "MlModelMetadata"
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/7/definitions/mlModelMetadataConfigType",
                  "default": "MlModelMetadata"
                },
                "mlModelFilterPattern": {
                  "description": "Regex to only fetch MlModels with names matching the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "ML Model Filter Pattern"
                },
                "markDeletedMlModels": {
                  "description": "Optional configuration to soft delete MlModels in OpenMetadata if the source MlModels are deleted. Also, if the MlModel is deleted, all the associated entities like lineage, etc., with that MlModels will be deleted",
                  "type": "boolean",
                  "default": true,
                  "title": "Mark Deleted ML Models"
                }
              },
              "additionalProperties": false
            },
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/storageServiceMetadataPipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "StorageServiceMetadataPipeline",
              "description": "StorageService Metadata Pipeline Configuration.",
              "type": "object",
              "definitions": {
                "storageMetadataConfigType": {
                  "description": "Object Store Source Config Metadata Pipeline type",
                  "type": "string",
                  "enum": [
                    "StorageMetadata"
                  ],
                  "default": "StorageMetadata"
                },
                "noMetadataConfigurationSource": {
                  "title": "No Global Manifest",
                  "description": "No manifest file available. Ingestion would look for bucket-level metadata file instead",
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/8/definitions/storageMetadataConfigType",
                  "default": "StorageMetadata"
                },
                "containerFilterPattern": {
                  "description": "Regex to only fetch containers that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern"
                },
                "storageMetadataConfigSource": {
                  "mask": true,
                  "title": "Storage Metadata Configuration Source",
                  "oneOf": [
                    {
                      "$ref": "#/definitions/sourceConfig/properties/config/oneOf/8/definitions/noMetadataConfigurationSource"
                    },
                    {
                      "$id": "https://open-metadata.org/schema/metadataIngestion/storage/storageMetadataLocalConfig.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "Storage Metadata Local Config",
                      "description": "Storage Metadata Manifest file path config.",
                      "javaType": "org.openmetadata.schema.metadataIngestion.storage.StorageMetadataLocalConfig",
                      "type": "object",
                      "properties": {
                        "manifestFilePath": {
                          "title": "Storage Metadata Manifest File Path",
                          "description": "Storage Metadata manifest file path to extract locations to ingest from.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "manifestFilePath"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/metadataIngestion/storage/storageMetadataHttpConfig.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "Storage Metadata Http Config",
                      "description": "Storage Metadata Manifest file HTTP path config.",
                      "javaType": "org.openmetadata.schema.metadataIngestion.storage.StorageMetadataHttpConfig",
                      "type": "object",
                      "properties": {
                        "manifestHttpPath": {
                          "title": "Storage Metadata Manifest HTTP Path",
                          "description": "Storage Metadata manifest http file path to extract locations to ingest from.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "manifestHttpPath"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/metadataIngestion/storage/storageMetadataS3Config.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "Storage Metadata S3 Config",
                      "description": "Storage Metadata Manifest file S3 path config.",
                      "javaType": "org.openmetadata.schema.metadataIngestion.storage.StorageMetadataS3Config",
                      "type": "object",
                      "properties": {
                        "securityConfig": {
                          "title": "S3 Security Config",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/9/properties/awsConfig"
                        },
                        "prefixConfig": {
                          "title": "Storage Metadata Prefix Config",
                          "$id": "https://open-metadata.org/schema/metadataIngestion/storage/storageBucketDetails.json",
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "description": "Details of the bucket where the storage metadata manifest file is stored",
                          "javaType": "org.openmetadata.schema.metadataIngestion.storage.StorageMetadataBucketDetails",
                          "type": "object",
                          "properties": {
                            "containerName": {
                              "title": "Storage Metadata Container Name",
                              "description": "Name of the top level container where the storage metadata file is stored",
                              "type": "string"
                            },
                            "objectPrefix": {
                              "title": "Storage Metadata Object Prefix",
                              "description": "Path of the folder where the storage metadata file is stored. If the file is at the root, you can keep it empty.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "containerName"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "prefixConfig"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/metadataIngestion/storage/storageMetadataS3Config.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "Storage Metadata ADLS Config",
                      "description": "Storage Metadata Manifest file ADLS path config.",
                      "javaType": "org.openmetadata.schema.metadataIngestion.storage.StorageMetadataADLSConfig",
                      "type": "object",
                      "properties": {
                        "securityConfig": {
                          "title": "S3 Security Config",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/6/properties/config/oneOf/1/properties/credentials"
                        },
                        "prefixConfig": {
                          "title": "Storage Metadata Prefix Config",
                          "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/8/properties/storageMetadataConfigSource/oneOf/3/properties/prefixConfig"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "prefixConfig"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/searchServiceMetadataPipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "SearchServiceMetadataPipeline",
              "description": "SearchService Metadata Pipeline Configuration.",
              "type": "object",
              "definitions": {
                "searchMetadataConfigType": {
                  "description": "Search Source Config Metadata Pipeline type",
                  "type": "string",
                  "enum": [
                    "SearchMetadata"
                  ],
                  "default": "SearchMetadata"
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/9/definitions/searchMetadataConfigType",
                  "default": "SearchMetadata"
                },
                "searchIndexFilterPattern": {
                  "title": "Search Index Filter Pattern",
                  "description": "Regex to only fetch search indexes that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern"
                },
                "markDeletedSearchIndexes": {
                  "title": "Mark Deleted Search Index",
                  "description": "Optional configuration to soft delete search indexes in OpenMetadata if the source search indexes are deleted. Also, if the search index is deleted, all the associated entities like lineage, etc., with that search index will be deleted",
                  "type": "boolean",
                  "default": true
                },
                "includeSampleData": {
                  "title": "Include Sample Data",
                  "description": "Optional configuration to turn off fetching sample data for search index.",
                  "type": "boolean",
                  "default": true
                },
                "sampleSize": {
                  "title": "Sample Size",
                  "description": "No. of records of sample data we want to ingest.",
                  "default": 10,
                  "type": "integer"
                }
              },
              "additionalProperties": false
            },
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/testSuitePipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "TestSuitePipeline",
              "description": "TestSuite Pipeline Configuration.",
              "type": "object",
              "definitions": {
                "testSuiteConfigType": {
                  "description": "Pipeline Source Config Metadata Pipeline type",
                  "type": "string",
                  "enum": [
                    "TestSuite"
                  ],
                  "default": "TestSuite"
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/10/definitions/testSuiteConfigType",
                  "default": "TestSuite"
                },
                "entityFullyQualifiedName": {
                  "description": "Fully qualified name of the entity to be tested.",
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 3072
                },
                "profileSample": {
                  "description": "Percentage of data or no. of rows we want to execute the profiler and tests on",
                  "type": "number",
                  "default": null,
                  "title": "Profile Sample"
                },
                "profileSampleType": {
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/5/properties/profileSampleType",
                  "title": "Profile Sample Type"
                }
              },
              "required": [
                "type",
                "entityFullyQualifiedName"
              ],
              "additionalProperties": false
            },
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/metadataToElasticSearchPipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "MetadataToElasticSearchPipeline",
              "description": "Data Insight Pipeline Configuration.",
              "type": "object",
              "definitions": {
                "metadataToESConfigType": {
                  "description": "Pipeline Source Config Metadata Pipeline type",
                  "type": "string",
                  "enum": [
                    "MetadataToElasticSearch"
                  ],
                  "default": "MetadataToElasticSearch"
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/11/definitions/metadataToESConfigType",
                  "default": "MetadataToElasticSearch"
                },
                "regionName": {
                  "title": "AWS Region Name",
                  "description": "Region name. Required when using AWS Credentials.",
                  "type": "string",
                  "default": null
                },
                "caCerts": {
                  "title": "CA Certificates",
                  "description": "Certificate path to be added in configuration. The path should be local in the Ingestion Container.",
                  "type": "string",
                  "default": null
                },
                "timeout": {
                  "description": "Connection Timeout",
                  "type": "integer",
                  "default": 30
                },
                "useSSL": {
                  "title": "Use SSL",
                  "description": "Indicates whether to use SSL when connecting to ElasticSearch. By default, we will ignore SSL settings.",
                  "type": "boolean",
                  "default": false
                },
                "verifyCerts": {
                  "title": "Validate Certificates",
                  "description": "Indicates whether to verify certificates when using SSL connection to ElasticSearch. Ignored by default. Is set to true, make sure to send the certificates in the property `CA Certificates`.",
                  "type": "boolean",
                  "default": false
                },
                "useAwsCredentials": {
                  "title": "Use AWS Credentials",
                  "description": "Indicates whether to use aws credentials when connecting to OpenSearch in AWS.",
                  "type": "boolean",
                  "default": false
                },
                "searchIndexMappingLanguage": {
                  "description": "Recreate Indexes with updated Language",
                  "javaType": "org.openmetadata.schema.type.IndexMappingLanguage",
                  "type": "string",
                  "enum": [
                    "EN",
                    "JP",
                    "ZH"
                  ],
                  "default": "EN"
                },
                "batchSize": {
                  "title": "Batch Size",
                  "description": "Maximum number of events entities in a batch (Default 1000).",
                  "type": "integer",
                  "default": 1000
                },
                "recreateIndex": {
                  "title": "Recreate Indexes",
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "type"
              ],
              "additionalProperties": false
            },
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/dataInsightPipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "DataInsightPipeline",
              "description": "Data Insight Pipeline Configuration.",
              "type": "object",
              "definitions": {
                "dataInsightConfigType": {
                  "description": "Pipeline Source Config Metadata Pipeline type",
                  "type": "string",
                  "enum": [
                    "dataInsight"
                  ],
                  "default": "dataInsight"
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/12/definitions/dataInsightConfigType",
                  "default": "dataInsight"
                }
              },
              "required": [
                "type"
              ],
              "additionalProperties": false
            },
            {
              "$id": "https://open-metadata.org/schema/metadataIngestion/dbtPipeline.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "dbtPipeline",
              "description": "DBT Pipeline Configuration.",
              "type": "object",
              "definitions": {
                "dbtConfigType": {
                  "description": "DBT Config Pipeline type",
                  "type": "string",
                  "enum": [
                    "DBT"
                  ],
                  "default": "DBT"
                }
              },
              "properties": {
                "type": {
                  "description": "Pipeline type",
                  "$ref": "#/definitions/sourceConfig/properties/config/oneOf/13/definitions/dbtConfigType",
                  "default": "DBT"
                },
                "dbtConfigSource": {
                  "mask": true,
                  "title": "DBT Configuration Source",
                  "description": "Available sources to fetch DBT catalog and manifest files.",
                  "oneOf": [
                    {
                      "$id": "https://open-metadata.org/schema/metadataIngestion/dbtconfig/dbtCloudConfig.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DBT Cloud Config",
                      "description": "dbt Cloud configuration.",
                      "javaType": "org.openmetadata.schema.metadataIngestion.dbtconfig.DbtCloudConfig",
                      "type": "object",
                      "properties": {
                        "dbtCloudAuthToken": {
                          "title": "dbt Cloud Authentication Token",
                          "description": "dbt cloud account authentication token",
                          "type": "string",
                          "format": "password"
                        },
                        "dbtCloudAccountId": {
                          "title": "dbt Cloud Account Id",
                          "description": "dbt cloud account Id",
                          "type": "string"
                        },
                        "dbtCloudProjectId": {
                          "title": "dbt Cloud Project Id",
                          "description": "In case of multiple projects in a dbt cloud account, specify the project's id from which you want to extract the dbt run artifacts",
                          "type": "string"
                        },
                        "dbtCloudJobId": {
                          "title": "dbt Cloud Job Id",
                          "description": "dbt cloud job id.",
                          "type": "string"
                        },
                        "dbtCloudUrl": {
                          "title": "dbt Cloud URL",
                          "description": "URL to connect to your dbt cloud instance. E.g., https://cloud.getdbt.com or https://emea.dbt.com/",
                          "type": "string",
                          "format": "uri",
                          "default": "https://cloud.getdbt.com"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "dbtCloudAuthToken",
                        "dbtCloudAccountId",
                        "dbtCloudUrl"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/metadataIngestion/dbtconfig/dbtLocalConfig.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DBT Local Config",
                      "description": "DBT Catalog, Manifest and Run Results file path config.",
                      "javaType": "org.openmetadata.schema.metadataIngestion.dbtconfig.DbtLocalConfig",
                      "type": "object",
                      "properties": {
                        "dbtCatalogFilePath": {
                          "title": "DBT Catalog File Path",
                          "description": "DBT catalog file path to extract dbt models with their column schemas.",
                          "type": "string"
                        },
                        "dbtManifestFilePath": {
                          "title": "DBT Manifest File Path",
                          "description": "DBT manifest file path to extract dbt models and associate with tables.",
                          "type": "string"
                        },
                        "dbtRunResultsFilePath": {
                          "title": "DBT Run Results File Path",
                          "description": "DBT run results file path to extract the test results information.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "dbtManifestFilePath"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/metadataIngestion/dbtconfig/dbtHttpConfig.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DBT HTTP Config",
                      "description": "DBT Catalog, Manifest and Run Results HTTP path configuration.",
                      "javaType": "org.openmetadata.schema.metadataIngestion.dbtconfig.DbtHttpConfig",
                      "type": "object",
                      "properties": {
                        "dbtCatalogHttpPath": {
                          "title": "DBT Catalog HTTP File Path",
                          "description": "DBT catalog http file path to extract dbt models with their column schemas.",
                          "type": "string"
                        },
                        "dbtManifestHttpPath": {
                          "title": "DBT Manifest HTTP File Path",
                          "description": "DBT manifest http file path to extract dbt models and associate with tables.",
                          "type": "string"
                        },
                        "dbtRunResultsHttpPath": {
                          "title": "DBT Run Results HTTP File Path",
                          "description": "DBT run results http file path to extract the test results information.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "dbtManifestHttpPath"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/metadataIngestion/dbtconfig/dbtS3Config.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DBT S3 Config",
                      "description": "DBT Catalog, Manifest and Run Results files in S3 bucket. We will search for catalog.json, manifest.json and run_results.json.",
                      "javaType": "org.openmetadata.schema.metadataIngestion.dbtconfig.DbtS3Config",
                      "type": "object",
                      "properties": {
                        "dbtSecurityConfig": {
                          "title": "DBT S3 Security Config",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/9/properties/awsConfig"
                        },
                        "dbtPrefixConfig": {
                          "title": "DBT Prefix Config",
                          "description": "Details of the bucket where the dbt files are stored",
                          "type": "object",
                          "properties": {
                            "dbtBucketName": {
                              "title": "DBT Bucket Name",
                              "description": "Name of the bucket where the dbt files are stored",
                              "type": "string"
                            },
                            "dbtObjectPrefix": {
                              "title": "DBT Object Prefix",
                              "description": "Path of the folder where the dbt files are stored",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    {
                      "$id": "https://open-metadata.org/schema/metadataIngestion/dbtconfig/dbtGCSConfig.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DBT GCS Config",
                      "type": "object",
                      "description": "DBT Catalog, Manifest and Run Results files in GCS storage. We will search for catalog.json, manifest.json and run_results.json.",
                      "javaType": "org.openmetadata.schema.metadataIngestion.dbtconfig.DbtGCSConfig",
                      "properties": {
                        "dbtSecurityConfig": {
                          "title": "DBT GCS Security Config",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/credentials"
                        },
                        "dbtPrefixConfig": {
                          "title": "DBT Prefix Config",
                          "description": "Details of the bucket where the dbt files are stored",
                          "type": "object",
                          "properties": {
                            "dbtBucketName": {
                              "title": "DBT Bucket Name",
                              "description": "Name of the bucket where the dbt files are stored",
                              "type": "string"
                            },
                            "dbtObjectPrefix": {
                              "title": "DBT Object Prefix",
                              "description": "Path of the folder where the dbt files are stored",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    {
                      "$id": "https://open-metadata.org/schema/metadataIngestion/dbtconfig/dbtAzureConfig.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DBT Azure Config",
                      "type": "object",
                      "description": "DBT Catalog, Manifest and Run Results files in Azure bucket. We will search for catalog.json, manifest.json and run_results.json.",
                      "javaType": "org.openmetadata.schema.metadataIngestion.dbtconfig.DbtAzureConfig",
                      "properties": {
                        "dbtSecurityConfig": {
                          "title": "DBT Azure Security Config",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/6/properties/config/oneOf/1/properties/credentials"
                        },
                        "dbtPrefixConfig": {
                          "title": "DBT Prefix Config",
                          "description": "Details of the bucket where the dbt files are stored",
                          "type": "object",
                          "properties": {
                            "dbtBucketName": {
                              "title": "DBT Bucket Name",
                              "description": "Name of the bucket where the dbt files are stored",
                              "type": "string"
                            },
                            "dbtObjectPrefix": {
                              "title": "DBT Object Prefix",
                              "description": "Path of the folder where the dbt files are stored",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    }
                  ]
                },
                "dbtUpdateDescriptions": {
                  "description": "Optional configuration to update the description from DBT or not",
                  "type": "boolean",
                  "default": false
                },
                "includeTags": {
                  "description": "Optional configuration to toggle the tags ingestion.",
                  "type": "boolean",
                  "default": true
                },
                "dbtClassificationName": {
                  "title": "dbt Classification Name",
                  "description": "Custom OpenMetadata Classification name for dbt tags.",
                  "type": "string",
                  "default": "dbtTags"
                },
                "schemaFilterPattern": {
                  "description": "Regex to only fetch tables or databases that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Schema Filter Pattern"
                },
                "tableFilterPattern": {
                  "description": "Regex exclude tables or databases that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Table Filter Pattern"
                },
                "parsingTimeoutLimit": {
                  "description": "Configuration to set the timeout for parsing the query in seconds.",
                  "type": "integer",
                  "default": 300,
                  "title": "Parsing Timeout Limit (in sec.)"
                },
                "databaseFilterPattern": {
                  "description": "Regex to only fetch databases that matches the pattern.",
                  "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/0/properties/tableFilterPattern",
                  "title": "Database Filter Pattern"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "source": {
      "description": "Configuration for Source component in OpenMetadata Ingestion Framework.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the source connector ex: mysql, snowflake, tableau etc..",
          "type": "string"
        },
        "serviceName": {
          "description": "Type of the source connector ex: mysql, snowflake, tableau etc..",
          "type": "string"
        },
        "serviceConnection": {
          "description": "Connection configuration for the source. ex: mysql , tableau connection.",
          "oneOf": [
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.type.DashboardConnection",
              "description": "Dashboard Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/lookerConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "LookerConnection",
                      "description": "Looker Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.LookerConnection",
                      "definitions": {
                        "lookerType": {
                          "description": "Looker service type",
                          "type": "string",
                          "enum": [
                            "Looker"
                          ],
                          "default": "Looker"
                        },
                        "noGitCredentials": {
                          "title": "No GitHub Credentials",
                          "description": "Do not set any credentials. Note that credentials are required to extract .lkml views and their lineage.",
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/0/definitions/lookerType",
                          "default": "Looker"
                        },
                        "clientId": {
                          "title": "Client ID",
                          "description": "User's Client ID. This user should have privileges to read all the metadata in Looker.",
                          "type": "string"
                        },
                        "clientSecret": {
                          "title": "Client Secret",
                          "description": "User's Client Secret.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "URL to the Looker instance.",
                          "type": "string",
                          "format": "uri"
                        },
                        "gitCredentials": {
                          "title": "GitHub Credentials",
                          "description": "Credentials to extract the .lkml files from a repository. This is required to get all the lineage and definitions.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/0/definitions/noGitCredentials"
                            },
                            {
                              "$id": "https://open-metadata.org/schema/security/credentials/githubCredentials.json",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "GitHubCredentials",
                              "description": "Credentials for a GitHub repository",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.credentials.GitHubCredentials",
                              "definitions": {
                                "githubType": {
                                  "description": "GitHub Credentials type",
                                  "type": "string",
                                  "enum": [
                                    "GitHub"
                                  ],
                                  "default": "GitHub"
                                }
                              },
                              "properties": {
                                "type": {
                                  "title": "Credentials Type",
                                  "description": "Credentials Type",
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/0/properties/gitCredentials/oneOf/1/definitions/githubType",
                                  "default": "GitHub"
                                },
                                "repositoryOwner": {
                                  "title": "Repository Owner",
                                  "description": "The owner (user or organization) of a Git repository. For example, in https://github.com/open-metadata/OpenMetadata, the owner is `open-metadata`.",
                                  "type": "string"
                                },
                                "repositoryName": {
                                  "title": "Repository Name",
                                  "description": "The name of a Git repository. For example, in https://github.com/open-metadata/OpenMetadata, the name is `OpenMetadata`.",
                                  "type": "string"
                                },
                                "token": {
                                  "title": "API Token",
                                  "description": "Token to use the API. This is required for private repositories and to ensure we don't hit API limits.",
                                  "type": "string",
                                  "format": "password"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "repositoryOwner",
                                "repositoryName"
                              ]
                            },
                            {
                              "$id": "https://open-metadata.org/schema/security/credentials/bitbucketCredentials.json",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "BitBucketCredentials",
                              "description": "Credentials for a BitBucket repository",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.credentials.BitBucketCredentials",
                              "definitions": {
                                "bitbucketType": {
                                  "description": "BitBucket Credentials type",
                                  "type": "string",
                                  "enum": [
                                    "BitBucket"
                                  ],
                                  "default": "BitBucket"
                                }
                              },
                              "properties": {
                                "type": {
                                  "title": "Credentials Type",
                                  "description": "Credentials Type",
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/0/properties/gitCredentials/oneOf/2/definitions/bitbucketType",
                                  "default": "BitBucket"
                                },
                                "repositoryOwner": {
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/0/properties/gitCredentials/oneOf/1/properties/repositoryOwner"
                                },
                                "repositoryName": {
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/0/properties/gitCredentials/oneOf/1/properties/repositoryName"
                                },
                                "token": {
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/0/properties/gitCredentials/oneOf/1/properties/token"
                                },
                                "branch": {
                                  "title": "Main Branch",
                                  "description": "Main production branch of the repository. E.g., `main`",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "repositoryOwner",
                                "repositoryName",
                                "branch"
                              ]
                            }
                          ]
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "clientId",
                        "clientSecret"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/metabaseConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MetabaseConnection",
                      "description": "Metabase Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.MetabaseConnection",
                      "definitions": {
                        "metabaseType": {
                          "description": "Metabase service type",
                          "type": "string",
                          "enum": [
                            "Metabase"
                          ],
                          "default": "Metabase"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/1/definitions/metabaseType",
                          "default": "Metabase"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Metabase. This user should have privileges to read all the metadata in Metabase.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Metabase.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "Host and Port of the Metabase instance.",
                          "type": "string",
                          "format": "uri"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/powerBIConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "PowerBIConnection",
                      "description": "PowerBI Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.PowerBIConnection",
                      "definitions": {
                        "powerBiType": {
                          "description": "PowerBI service type",
                          "type": "string",
                          "enum": [
                            "PowerBI"
                          ],
                          "default": "PowerBI"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/2/definitions/powerBiType",
                          "default": "PowerBI"
                        },
                        "clientId": {
                          "title": "Client ID",
                          "description": "client_id for PowerBI.",
                          "type": "string"
                        },
                        "clientSecret": {
                          "title": "Client Secret",
                          "description": "clientSecret for PowerBI.",
                          "type": "string",
                          "format": "password"
                        },
                        "tenantId": {
                          "title": "Tenant ID",
                          "description": "Tenant ID for PowerBI.",
                          "type": "string"
                        },
                        "authorityURI": {
                          "title": "Authority URI",
                          "description": "Authority URI for the PowerBI service.",
                          "type": "string",
                          "default": "https://login.microsoftonline.com/"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "Dashboard URL for PowerBI service.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://app.powerbi.com"
                        },
                        "scope": {
                          "title": "Scope",
                          "description": "PowerBI secrets.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "default": [
                            "https://analysis.windows.net/powerbi/api/.default"
                          ]
                        },
                        "pagination_entity_per_page": {
                          "title": "Pagination Entity Per Page",
                          "description": "Entity Limit set here will be used to paginate the PowerBi APIs",
                          "type": "integer",
                          "default": 100
                        },
                        "useAdminApis": {
                          "title": "Use PowerBI Admin APIs",
                          "description": "Fetch the PowerBI metadata using admin APIs",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "clientId",
                        "clientSecret",
                        "tenantId"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/redashConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "RedashConnection",
                      "description": "Redash Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.RedashConnection",
                      "definitions": {
                        "redashType": {
                          "description": "Redash service type",
                          "type": "string",
                          "enum": [
                            "Redash"
                          ],
                          "default": "Redash"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/3/definitions/redashType",
                          "default": "Redash"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username for Redash",
                          "type": "string"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "URL for the Redash instance",
                          "type": "string",
                          "format": "uri",
                          "default": "http://localhost:5000"
                        },
                        "apiKey": {
                          "title": "API Key",
                          "description": "API key of the redash instance to access.",
                          "type": "string",
                          "format": "password"
                        },
                        "redashVersion": {
                          "title": "Redash Version",
                          "description": "Version of the Redash instance",
                          "type": "string",
                          "default": "10.0.0"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "apiKey"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/supersetConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SupersetConnection",
                      "description": "Superset Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.SupersetConnection",
                      "definitions": {
                        "supersetType": {
                          "description": "Superset service type",
                          "type": "string",
                          "enum": [
                            "Superset"
                          ],
                          "default": "Superset"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/4/definitions/supersetType",
                          "default": "Superset"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "URL for the superset instance.",
                          "type": "string",
                          "format": "uri",
                          "default": "http://localhost:8088"
                        },
                        "connection": {
                          "title": "Superset Connection",
                          "description": "Choose between API or database connection fetch metadata from superset.",
                          "oneOf": [
                            {
                              "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/supersetApiConnection.json",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "SupersetApiConnection",
                              "description": "Superset API Connection Config",
                              "type": "object",
                              "definitions": {
                                "apiProvider": {
                                  "title": "Provider",
                                  "description": "Authentication provider for the Superset service. For basic user/password authentication, the default value `db` can be used. This parameter is used internally to connect to Superset's REST API.",
                                  "type": "string",
                                  "enum": [
                                    "db",
                                    "ldap"
                                  ],
                                  "default": "db"
                                }
                              },
                              "properties": {
                                "provider": {
                                  "title": "Provider",
                                  "description": "Authentication provider for the Superset service. For basic user/password authentication, the default value `db` can be used. This parameter is used internally to connect to Superset's REST API.",
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/4/properties/connection/oneOf/0/definitions/apiProvider",
                                  "default": "db"
                                },
                                "username": {
                                  "title": "Username",
                                  "description": "Username for Superset.",
                                  "type": "string"
                                },
                                "password": {
                                  "title": "Password",
                                  "description": "Password for Superset.",
                                  "type": "string",
                                  "format": "password"
                                },
                                "verifySSL": {
                                  "$ref": "#/definitions/workflowConfig/properties/openMetadataServerConfig/properties/verifySSL",
                                  "default": "no-ssl"
                                },
                                "sslConfig": {
                                  "$ref": "#/definitions/workflowConfig/properties/openMetadataServerConfig/properties/sslConfig"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "provider",
                                "password",
                                "username"
                              ]
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/17"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/14"
                            }
                          ]
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "connection"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/tableauConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "TableauConnection",
                      "description": "Tableau Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.TableauConnection",
                      "definitions": {
                        "tableauType": {
                          "description": "Tableau service type",
                          "type": "string",
                          "enum": [
                            "Tableau"
                          ],
                          "default": "Tableau"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/5/definitions/tableauType",
                          "default": "Tableau"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "Tableau Server.",
                          "type": "string",
                          "format": "uri"
                        },
                        "authType": {
                          "mask": true,
                          "title": "Authentication type for Tableau",
                          "description": "Types of methods used to authenticate to the tableau instance",
                          "oneOf": [
                            {
                              "$id": "https://open-metadata.org/schema/security/credentials/basicAuth.json",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "BasicAuth",
                              "description": "Basic Auth Credentials",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.credentials.BasicAuth",
                              "properties": {
                                "username": {
                                  "title": "Username",
                                  "description": "Username to access the service.",
                                  "type": "string"
                                },
                                "password": {
                                  "title": "Password",
                                  "description": "Password to access the service.",
                                  "type": "string",
                                  "format": "password"
                                }
                              },
                              "required": [
                                "username",
                                "password"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "$id": "https://open-metadata.org/schema/security/credentials/accessTokenAuth.json",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "AccessTokenAuth",
                              "description": "Access Token Auth Credentials",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.credentials.AccessTokenAuth",
                              "properties": {
                                "personalAccessTokenName": {
                                  "title": "Personal Access Token",
                                  "description": "Personal Access Token Name.",
                                  "type": "string"
                                },
                                "personalAccessTokenSecret": {
                                  "title": "Personal Access Token Secret",
                                  "description": "Personal Access Token Secret.",
                                  "type": "string",
                                  "format": "password"
                                }
                              },
                              "required": [
                                "personalAccessTokenName",
                                "personalAccessTokenSecret"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        "apiVersion": {
                          "title": "API Version",
                          "description": "Tableau API version.",
                          "type": "string"
                        },
                        "siteName": {
                          "title": "Site Name",
                          "description": "Tableau Site Name.",
                          "type": "string"
                        },
                        "siteUrl": {
                          "title": "Site Url",
                          "description": "Tableau Site Url.",
                          "type": "string"
                        },
                        "env": {
                          "title": "Tableau Environment",
                          "description": "Tableau Environment Name.",
                          "type": "string",
                          "default": "tableau_prod"
                        },
                        "paginationLimit": {
                          "title": "Pagination Limit",
                          "description": "Pagination limit used while querying the tableau metadata API for getting data sources",
                          "type": "integer",
                          "default": 10
                        },
                        "verifySSL": {
                          "$ref": "#/definitions/workflowConfig/properties/openMetadataServerConfig/properties/verifySSL",
                          "default": "no-ssl"
                        },
                        "sslConfig": {
                          "$ref": "#/definitions/workflowConfig/properties/openMetadataServerConfig/properties/sslConfig"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "apiVersion",
                        "env",
                        "hostPort"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/modeConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "ModeConnection",
                      "description": "Mode Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.ModeConnection",
                      "definitions": {
                        "modeType": {
                          "description": "Mode service type",
                          "type": "string",
                          "enum": [
                            "Mode"
                          ],
                          "default": "Mode"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/6/definitions/modeType",
                          "default": "Mode"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "URL for the mode instance.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://app.mode.com"
                        },
                        "accessToken": {
                          "title": "Access Token",
                          "description": "Access Token for Mode Dashboard",
                          "type": "string"
                        },
                        "accessTokenPassword": {
                          "title": "Access Token Password",
                          "description": "Access Token Password for Mode Dashboard",
                          "type": "string",
                          "format": "password"
                        },
                        "workspaceName": {
                          "title": "Workspace Name",
                          "description": "Mode Workspace Name",
                          "type": "string"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "accessToken",
                        "accessTokenPassword",
                        "workspaceName"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/customDashboardConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomDashboardConnection",
                      "description": "Custom Dashboard Service connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.CustomDashboardConnection",
                      "definitions": {
                        "customDashboardType": {
                          "title": "Service Type",
                          "description": "Custom dashboard service type",
                          "type": "string",
                          "enum": [
                            "CustomDashboard"
                          ],
                          "default": "CustomDashboard"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom dashboard service type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/7/definitions/customDashboardType",
                          "default": "CustomDashboard"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/domoDashboardConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DomoDashboardConnection",
                      "description": "Domo Dashboard Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.DomoDashboardConnection",
                      "definitions": {
                        "domoDashboardType": {
                          "description": " service type",
                          "type": "string",
                          "enum": [
                            "DomoDashboard"
                          ],
                          "default": "DomoDashboard"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/8/definitions/domoDashboardType",
                          "default": "DomoDashboard"
                        },
                        "clientId": {
                          "title": "Client ID",
                          "description": "Client ID for DOMO",
                          "type": "string"
                        },
                        "secretToken": {
                          "title": "Secret Token",
                          "description": "Secret Token to connect DOMO",
                          "type": "string",
                          "format": "password"
                        },
                        "accessToken": {
                          "title": "Access Token",
                          "description": "Access token to connect to DOMO",
                          "type": "string"
                        },
                        "apiHost": {
                          "expose": true,
                          "title": "API Host",
                          "description": "API Host to connect to DOMO instance",
                          "default": "api.domo.com",
                          "type": "string",
                          "format": "string"
                        },
                        "instanceDomain": {
                          "title": "Instance Domain",
                          "description": "URL of your Domo instance, e.g., https://openmetadata.domo.com",
                          "type": "string",
                          "format": "uri"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "clientId",
                        "secretToken",
                        "instanceDomain"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/quickSightConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "QuickSightConnection",
                      "description": "QuickSight Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.QuickSightConnection",
                      "definitions": {
                        "quickSightType": {
                          "description": "QuickSight service type",
                          "type": "string",
                          "enum": [
                            "QuickSight"
                          ],
                          "default": "QuickSight"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/9/definitions/quickSightType",
                          "default": "QuickSight"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$id": "https://open-metadata.org/schema/security/credentials/awsCredentials.json",
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "description": "AWS credentials configs.",
                          "type": "object",
                          "javaType": "org.openmetadata.schema.security.credentials.AWSCredentials",
                          "properties": {
                            "awsAccessKeyId": {
                              "title": "AWS Access Key ID",
                              "description": "AWS Access key ID.",
                              "type": "string"
                            },
                            "awsSecretAccessKey": {
                              "title": "AWS Secret Access Key",
                              "description": "AWS Secret Access Key.",
                              "type": "string",
                              "format": "password"
                            },
                            "awsRegion": {
                              "title": "AWS Region",
                              "description": "AWS Region",
                              "type": "string"
                            },
                            "awsSessionToken": {
                              "title": "AWS Session Token",
                              "description": "AWS Session Token.",
                              "type": "string"
                            },
                            "endPointURL": {
                              "title": "Endpoint URL",
                              "description": "EndPoint URL for the AWS",
                              "type": "string",
                              "format": "uri"
                            },
                            "profileName": {
                              "title": "Profile Name",
                              "description": "The name of a profile to use with the boto session.",
                              "type": "string"
                            },
                            "assumeRoleArn": {
                              "title": "Role Arn for Assume Role",
                              "description": "The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role",
                              "type": "string"
                            },
                            "assumeRoleSessionName": {
                              "title": "Role Session Name for Assume Role",
                              "description": "An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role",
                              "type": "string",
                              "default": "OpenMetadataSession"
                            },
                            "assumeRoleSourceIdentity": {
                              "title": "Source Identity for Assume Role",
                              "description": "The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "awsRegion"
                          ]
                        },
                        "awsAccountId": {
                          "title": "AWS Account ID",
                          "description": "AWS Account ID",
                          "type": "string"
                        },
                        "identityType": {
                          "title": "Identity Type",
                          "description": "The authentication method that the user uses to sign in.",
                          "type": "string",
                          "enum": [
                            "IAM",
                            "QUICKSIGHT",
                            "ANONYMOUS"
                          ],
                          "default": "IAM"
                        },
                        "namespace": {
                          "description": "The Amazon QuickSight namespace that contains the dashboard IDs in this request ( To be provided when identityType is `ANONYMOUS` )",
                          "type": "string"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig",
                        "awsAccountId"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/qlikSenseConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "QlikSenseConnection",
                      "description": "Qlik Sense Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.QlikSenseConnection",
                      "definitions": {
                        "qlikSenseType": {
                          "description": "Qlik sense service type",
                          "type": "string",
                          "enum": [
                            "QlikSense"
                          ],
                          "default": "QlikSense"
                        },
                        "qlikCertificatePath": {
                          "description": "Qlik Authentication Certificate File Path",
                          "title": "Qlik Certificates By File Path",
                          "type": "object",
                          "properties": {
                            "clientCertificate": {
                              "title": "Client Certificate Path",
                              "description": "Client Certificate",
                              "type": "string"
                            },
                            "clientKeyCertificate": {
                              "title": "Client Key Certificate",
                              "description": "Client Key Certificate.",
                              "type": "string"
                            },
                            "rootCertificate": {
                              "title": "Root Certificate",
                              "description": "Root Certificate.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "clientCertificate",
                            "clientKeyCertificate",
                            "rootCertificate"
                          ]
                        },
                        "qlikCertificateValues": {
                          "description": "Qlik Authentication Certificate By Values",
                          "title": "Qlik Certificates By Values",
                          "type": "object",
                          "properties": {
                            "clientCertificateData": {
                              "title": "Client Certificate Value",
                              "description": "Client Certificate",
                              "type": "string",
                              "format": "password"
                            },
                            "clientKeyCertificateData": {
                              "title": "Client Key Certificate Value",
                              "description": "Client Key Certificate.",
                              "type": "string",
                              "format": "password"
                            },
                            "rootCertificateData": {
                              "title": "Root Certificate Value",
                              "description": "Root Certificate.",
                              "type": "string",
                              "format": "password"
                            },
                            "stagingDir": {
                              "title": "Staging Directory Path",
                              "description": "Staging Directory Path",
                              "type": "string",
                              "default": "/tmp/openmetadata-qlik"
                            }
                          },
                          "required": [
                            "clientCertificateData",
                            "clientKeyCertificateData",
                            "rootCertificateData",
                            "stagingDir"
                          ]
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/10/definitions/qlikSenseType",
                          "default": "QlikSense"
                        },
                        "displayUrl": {
                          "expose": true,
                          "title": "Qlik Sense Base URL",
                          "description": "Qlik Sense Base URL, used for genrating dashboard & chat url",
                          "type": "string",
                          "format": "uri"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Qlik Engine JSON API Websocket URL",
                          "description": "URL for the superset instance.",
                          "type": "string",
                          "format": "uri"
                        },
                        "certificates": {
                          "oneOf": [
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/10/definitions/qlikCertificateValues"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/10/definitions/qlikCertificatePath"
                            }
                          ]
                        },
                        "userDirectory": {
                          "title": "User Directory",
                          "description": "User Directory.",
                          "type": "string"
                        },
                        "userId": {
                          "title": "User ID",
                          "description": "User ID.",
                          "type": "string"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "certificates"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/lightdashConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "LightdashConnection",
                      "description": "Lightdash Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.LightdashConnection",
                      "definitions": {
                        "lightdashType": {
                          "description": "Lightdash service type",
                          "type": "string",
                          "enum": [
                            "Lightdash"
                          ],
                          "default": "Lightdash"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/11/definitions/lightdashType",
                          "default": "Lightdash"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host Port",
                          "description": "Address for your running Lightdash instance",
                          "type": "string",
                          "format": "uri",
                          "default": "http://localhost:5000"
                        },
                        "apiKey": {
                          "title": "API Key",
                          "description": "The personal access token you can generate in the Lightdash app under the user settings",
                          "type": "string",
                          "format": "password"
                        },
                        "projectUUID": {
                          "title": "Project UUID",
                          "description": "The Project UUID for your Lightdash instance",
                          "type": "string"
                        },
                        "spaceUUID": {
                          "title": "Space UUID",
                          "description": "The Space UUID for your Lightdash instance",
                          "type": "string"
                        },
                        "proxyAuthentication": {
                          "title": "Proxy Authentication",
                          "description": "Use if your Lightdash instance is behind a proxy like (Cloud IAP)",
                          "type": "string",
                          "format": "password"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "apiKey",
                        "projectUUID",
                        "spaceUUID"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "description": "Database Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/bigQueryConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "BigQueryConnection",
                      "description": "Google BigQuery Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.BigQueryConnection",
                      "definitions": {
                        "bigqueryType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "BigQuery"
                          ],
                          "default": "BigQuery"
                        },
                        "bigqueryScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "bigquery"
                          ],
                          "default": "bigquery"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/definitions/bigqueryType",
                          "default": "BigQuery"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/definitions/bigqueryScheme",
                          "default": "bigquery"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "BigQuery APIs URL.",
                          "type": "string",
                          "default": "bigquery.googleapis.com"
                        },
                        "credentials": {
                          "title": "GCP Credentials",
                          "description": "GCP Credentials",
                          "$id": "https://open-metadata.org/schema/security/credentials/gcpCredentials.json",
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "type": "object",
                          "javaType": "org.openmetadata.schema.security.credentials.GCPCredentials",
                          "definitions": {
                            "gcpCredentialsPath": {
                              "title": "GCP Credentials Path",
                              "description": "Pass the path of file containing the GCP credentials info",
                              "type": "string"
                            },
                            "GCPImpersonateServiceAccountValues": {
                              "title": "GCP impersonate service account values",
                              "description": "Pass the values to impersonate a service account of Google Cloud",
                              "type": "object",
                              "properties": {
                                "impersonateServiceAccount": {
                                  "title": "Target Service Account Email",
                                  "description": "The impersonated service account email",
                                  "type": "string"
                                },
                                "lifetime": {
                                  "title": "Lifetime",
                                  "description": "Number of seconds the delegated credential should be valid",
                                  "type": "integer",
                                  "default": 3600
                                }
                              }
                            }
                          },
                          "properties": {
                            "gcpConfig": {
                              "title": "GCP Credentials Configuration",
                              "description": "We support two ways of authenticating to GCP i.e via GCP Credentials Values or GCP Credentials Path",
                              "oneOf": [
                                {
                                  "$id": "https://open-metadata.org/schema/security/credentials/gcpValues.json",
                                  "$schema": "http://json-schema.org/draft-07/schema#",
                                  "type": "object",
                                  "javaType": "org.openmetadata.schema.security.credentials.GCPValues",
                                  "title": "GCP Credentials Values",
                                  "description": "Pass the raw credential values provided by GCP",
                                  "definitions": {
                                    "singleProjectId": {
                                      "title": "Single Project ID",
                                      "type": "string"
                                    },
                                    "multipleProjectId": {
                                      "title": "Multiple Project ID",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "properties": {
                                    "type": {
                                      "title": "Credentials Type",
                                      "description": "Google Cloud Platform account type.",
                                      "type": "string"
                                    },
                                    "projectId": {
                                      "title": "Project ID",
                                      "description": "Project ID",
                                      "oneOf": [
                                        {
                                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/credentials/properties/gcpConfig/oneOf/0/definitions/singleProjectId"
                                        },
                                        {
                                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/credentials/properties/gcpConfig/oneOf/0/definitions/multipleProjectId"
                                        }
                                      ]
                                    },
                                    "privateKeyId": {
                                      "title": "Private Key ID",
                                      "description": "Google Cloud private key id.",
                                      "type": "string"
                                    },
                                    "privateKey": {
                                      "title": "Private Key",
                                      "description": "Google Cloud private key.",
                                      "type": "string",
                                      "format": "password"
                                    },
                                    "clientEmail": {
                                      "title": "Client Email",
                                      "description": "Google Cloud email.",
                                      "type": "string"
                                    },
                                    "clientId": {
                                      "title": "Client ID",
                                      "description": "Google Cloud Client ID.",
                                      "type": "string"
                                    },
                                    "authUri": {
                                      "title": "Authentication URI",
                                      "description": "Google Cloud auth uri.",
                                      "type": "string",
                                      "format": "uri",
                                      "default": "https://accounts.google.com/o/oauth2/auth"
                                    },
                                    "tokenUri": {
                                      "title": "Token URI",
                                      "description": "Google Cloud token uri.",
                                      "type": "string",
                                      "format": "uri",
                                      "default": "https://oauth2.googleapis.com/token"
                                    },
                                    "authProviderX509CertUrl": {
                                      "title": "Authentication Provider x509 Certificate URL",
                                      "description": "Google Cloud auth provider certificate.",
                                      "type": "string",
                                      "format": "uri",
                                      "default": "https://www.googleapis.com/oauth2/v1/certs"
                                    },
                                    "clientX509CertUrl": {
                                      "title": "Client x509 Certificate URL",
                                      "description": "Google Cloud client certificate uri.",
                                      "type": "string",
                                      "format": "uri"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                {
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/credentials/definitions/gcpCredentialsPath"
                                }
                              ]
                            },
                            "gcpImpersonateServiceAccount": {
                              "title": "GCP Impersonate Service Account Configuration",
                              "description": "we enable the authenticated service account to impersonate another service account",
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/credentials/definitions/GCPImpersonateServiceAccountValues"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "gcpConfig"
                          ]
                        },
                        "taxonomyProjectID": {
                          "title": "Taxonomy Project IDs",
                          "description": "Project IDs used to fetch policy tags",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "default": null
                        },
                        "taxonomyLocation": {
                          "title": "Taxonomy Location",
                          "description": "Taxonomy location used to fetch policy tags",
                          "type": "string",
                          "default": "us"
                        },
                        "usageLocation": {
                          "title": "Usage Location",
                          "description": "Location used to query INFORMATION_SCHEMA.JOBS_BY_PROJECT to fetch usage data. You can pass multi-regions, such as `us` or `eu`, or you specific region. Australia and Asia multi-regions are not yet in GA.",
                          "type": "string",
                          "default": "us"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "description": "Supports Usage Extraction.",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsLineageExtraction": {
                          "description": "Supports Lineage Extraction.",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsDBTExtraction": {
                          "description": "Supports DBT Extraction.",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "description": "Supports Profiler",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "description": "The source service supports the database concept in its hierarchy",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "description": "For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.",
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "credentials"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/athenaConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AthenaConnection",
                      "description": "AWS Athena Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.AthenaConnection",
                      "definitions": {
                        "athenaType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Athena"
                          ],
                          "default": "Athena"
                        },
                        "athenaScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "awsathena+rest"
                          ],
                          "default": "awsathena+rest"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/1/definitions/athenaType",
                          "default": "Athena"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/1/definitions/athenaScheme",
                          "default": "awsathena+rest"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/9/properties/awsConfig"
                        },
                        "s3StagingDir": {
                          "title": "S3 Staging Directory",
                          "description": "S3 Staging Directory. Example: s3://postgres/input/",
                          "type": "string",
                          "format": "uri"
                        },
                        "workgroup": {
                          "title": "Athena Workgroup",
                          "description": "Athena workgroup.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "supportsUsageExtraction": {
                          "description": "Supports Usage Extraction.",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsLineageExtraction": {
                          "description": "Supports Lineage Extraction.",
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "s3StagingDir",
                        "awsConfig",
                        "workgroup"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/azureSQLConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AzureSQLConnection",
                      "description": "Azure SQL Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.AzureSQLConnection",
                      "definitions": {
                        "azureSQLType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "AzureSQL"
                          ],
                          "default": "AzureSQL"
                        },
                        "azureSQLScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "mssql+pyodbc"
                          ],
                          "default": "mssql+pyodbc"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/2/definitions/azureSQLType",
                          "default": "AzureSQL"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/2/definitions/azureSQLScheme",
                          "default": "mssql+pyodbc"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to AzureSQL. This user should have privileges to read the metadata.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to AzureSQL.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the AzureSQL service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "driver": {
                          "title": "Driver",
                          "description": "SQLAlchemy driver for AzureSQL.",
                          "type": "string",
                          "default": "ODBC Driver 18 for SQL Server"
                        },
                        "ingestAllDatabases": {
                          "title": "Ingest All Databases",
                          "description": "Ingest data from all databases in Azuresql. You can use databaseFilterPattern on top of this.",
                          "type": "boolean",
                          "default": false
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "title": "Supports Usage Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "title": "Supports Lineage Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDatabase"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "database"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/clickhouseConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "ClickhouseConnection",
                      "description": "Clickhouse Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.ClickhouseConnection",
                      "definitions": {
                        "clickhouseType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Clickhouse"
                          ],
                          "default": "Clickhouse"
                        },
                        "clickhouseScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "clickhouse+http",
                            "clickhouse+native"
                          ],
                          "default": "clickhouse+http"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/3/definitions/clickhouseType",
                          "default": "Clickhouse"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/3/definitions/clickhouseScheme",
                          "default": "clickhouse+http"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Clickhouse. This user should have privileges to read all the metadata in Clickhouse.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Clickhouse.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Clickhouse service.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "duration": {
                          "title": "Duration",
                          "description": "Clickhouse SQL connection duration.",
                          "type": "integer"
                        },
                        "https": {
                          "title": "Use HTTPS Protocol",
                          "description": "Use HTTPS Protocol for connection with clickhouse",
                          "type": "boolean"
                        },
                        "secure": {
                          "title": "Secure Connection",
                          "description": "Establish secure connection with clickhouse",
                          "type": "boolean"
                        },
                        "keyfile": {
                          "title": "Key File Path",
                          "description": "Path to key file for establishing secure connection",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/databricksConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DatabricksConnection",
                      "description": "Databricks Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.DatabricksConnection",
                      "definitions": {
                        "databricksType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Databricks"
                          ],
                          "default": "Databricks"
                        },
                        "databricksScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "databricks+connector"
                          ],
                          "default": "databricks+connector"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/4/definitions/databricksType",
                          "default": "Databricks"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/4/definitions/databricksScheme",
                          "default": "databricks+connector"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Databricks service.",
                          "type": "string"
                        },
                        "token": {
                          "title": "Token",
                          "description": "Generated Token to connect to Databricks.",
                          "type": "string",
                          "format": "password"
                        },
                        "httpPath": {
                          "title": "Http Path",
                          "description": "Databricks compute resources URL.",
                          "type": "string"
                        },
                        "catalog": {
                          "title": "Catalog",
                          "description": "Catalog of the data source(Example: hive_metastore). This is optional parameter, if you would like to restrict the metadata reading to a single catalog. When left blank, OpenMetadata Ingestion attempts to scan all the catalog.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "connectionTimeout": {
                          "title": "Connection Timeout",
                          "description": "The maximum amount of time (in seconds) to wait for a successful connection to the data source. If the connection attempt takes longer than this timeout period, an error will be returned.",
                          "type": "integer",
                          "default": 120
                        },
                        "useUnityCatalog": {
                          "title": "Use Unity Catalog",
                          "description": "Use unity catalog for fetching the metadata instead of using the hive metastore",
                          "type": "boolean",
                          "default": false
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "token"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/db2Connection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "Db2Connection",
                      "description": "Db2 Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.Db2Connection",
                      "definitions": {
                        "db2Type": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Db2"
                          ],
                          "default": "Db2"
                        },
                        "db2Scheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "db2+ibm_db"
                          ],
                          "default": "db2+ibm_db"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/5/definitions/db2Type",
                          "default": "Db2"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/5/definitions/db2Scheme",
                          "default": "db2+ibm_db"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to DB2. This user should have privileges to read all the metadata in DB2.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to DB2.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the DB2 service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "database",
                          "description": "Database of the data source.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "database"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/deltaLakeConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DeltaLakeConnection",
                      "description": "DeltaLake Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.DeltaLakeConnection",
                      "definitions": {
                        "deltaLakeType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "DeltaLake"
                          ],
                          "default": "DeltaLake"
                        },
                        "metastoreHostPortConnection": {
                          "title": "Hive Metastore Service",
                          "type": "object",
                          "properties": {
                            "metastoreHostPort": {
                              "title": "Hive Metastore Service",
                              "description": "Thrift connection to the metastore service. E.g., localhost:9083",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "metastoreDbConnection": {
                          "title": "Hive Metastore Database",
                          "type": "object",
                          "properties": {
                            "metastoreDb": {
                              "title": "Hive Metastore Database",
                              "description": "JDBC connection to the metastore database. E.g., jdbc:mysql://localhost:3306/demo_hive",
                              "type": "string"
                            },
                            "username": {
                              "title": "Connection UserName",
                              "description": "Username to use against metastore database. The value will be mapped as spark.hadoop.javax.jdo.option.ConnectionUserName sparks property.",
                              "type": "string"
                            },
                            "password": {
                              "title": "Connection Password",
                              "description": "Password to use against metastore database. The value will be mapped as spark.hadoop.javax.jdo.option.ConnectionPassword sparks property.",
                              "type": "string",
                              "format": "password"
                            },
                            "driverName": {
                              "title": "Connection Driver Name",
                              "description": "Driver class name for JDBC metastore. The value will be mapped as spark.hadoop.javax.jdo.option.ConnectionDriverName sparks property. E.g., org.mariadb.jdbc.Driver",
                              "type": "string"
                            },
                            "jdbcDriverClassPath": {
                              "title": "JDBC Driver Class Path",
                              "description": "Class path to JDBC driver required for JDBC connection. The value will be mapped as sparks.driver.extraClassPath sparks property.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "metastoreFilePathConnection": {
                          "title": "Hive Metastore File Path",
                          "type": "object",
                          "properties": {
                            "metastoreFilePath": {
                              "title": "Hive Metastore File Path",
                              "description": "Local path for the local file with metastore data. E.g., /tmp/metastore.db",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/definitions/deltaLakeType",
                          "default": "DeltaLake"
                        },
                        "metastoreConnection": {
                          "title": "Hive Metastore Connection",
                          "description": "Hive metastore service, local file path or metastore db.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/definitions/metastoreHostPortConnection"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/definitions/metastoreDbConnection"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/definitions/metastoreFilePathConnection"
                            }
                          ]
                        },
                        "appName": {
                          "title": "Application Name",
                          "description": "pySpark App Name.",
                          "type": "string",
                          "default": "OpenMetadata"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "description": "Key-Value pairs that will be used to add configs to the SparkSession.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "metastoreConnection"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/druidConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DruidConnection",
                      "description": "Druid Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.DruidConnection",
                      "definitions": {
                        "druidType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Druid"
                          ],
                          "default": "Druid"
                        },
                        "druidScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "druid"
                          ],
                          "default": "druid"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/7/definitions/druidType",
                          "default": "Druid"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/7/definitions/druidScheme",
                          "default": "druid"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Druid. This user should have privileges to read all the metadata in Druid.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Druid.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Druid service.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/dynamoDBConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DynamoDBConnection",
                      "description": "DynamoDB Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.DynamoDBConnection",
                      "definitions": {
                        "dynamoDBType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "DynamoDB"
                          ],
                          "default": "DynamoDB"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/8/definitions/dynamoDBType",
                          "default": "DynamoDB"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/9/properties/awsConfig"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/glueConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "GlueConnection",
                      "description": "Glue Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.GlueConnection",
                      "definitions": {
                        "glueType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Glue"
                          ],
                          "default": "Glue"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/9/definitions/glueType",
                          "default": "Glue"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/9/properties/awsConfig"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/hiveConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "HiveConnection",
                      "description": "Hive SQL Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.HiveConnection",
                      "definitions": {
                        "hiveType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Hive"
                          ],
                          "default": "Hive"
                        },
                        "hiveScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "hive",
                            "hive+http",
                            "hive+https"
                          ],
                          "default": "hive"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/10/definitions/hiveType",
                          "default": "Hive"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/10/definitions/hiveScheme",
                          "default": "hive"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Hive. This user should have privileges to read all the metadata in Hive.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Hive.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Hive service.",
                          "type": "string"
                        },
                        "auth": {
                          "title": "Authentication Mode",
                          "description": "Authentication mode to connect to hive.",
                          "type": "string",
                          "enum": [
                            "NONE",
                            "LDAP",
                            "KERBEROS",
                            "CUSTOM",
                            "NOSASL",
                            "BASIC",
                            "GSSAPI",
                            "JWT",
                            "PLAIN"
                          ],
                          "default": "NONE"
                        },
                        "kerberosServiceName": {
                          "title": "Kerberos Service Name",
                          "description": "If authenticating with Kerberos specify the Kerberos service name",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "authOptions": {
                          "title": "URL Authentication Options",
                          "description": "Authentication options to pass to Hive connector. These options are based on SQLAlchemy.",
                          "type": "string"
                        },
                        "metastoreConnection": {
                          "title": "Hive Metastore Connection Details",
                          "description": "Hive Metastore Connection Details",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/17"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/14"
                            },
                            {
                              "title": "None",
                              "type": "object"
                            }
                          ]
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/impalaConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "ImpalaConnection",
                      "description": "Impala SQL Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.ImpalaConnection",
                      "definitions": {
                        "impalaType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Impala"
                          ],
                          "default": "Impala"
                        },
                        "impalaScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "impala",
                            "impala4"
                          ],
                          "default": "impala"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/11/definitions/impalaType",
                          "default": "Impala"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/11/definitions/impalaScheme",
                          "default": "impala"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Impala. This user should have privileges to read all the metadata in Impala.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Impala.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Impala service.",
                          "type": "string"
                        },
                        "authMechanism": {
                          "title": "Authentication Mode",
                          "description": "Authentication mode to connect to Impala.",
                          "type": "string",
                          "enum": [
                            "NOSASL",
                            "PLAIN",
                            "GSSAPI",
                            "LDAP",
                            "JWT"
                          ],
                          "default": "PLAIN"
                        },
                        "kerberosServiceName": {
                          "title": "Kerberos Service Name",
                          "description": "If authenticating with Kerberos specify the Kerberos service name",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "useSSL": {
                          "title": "Use SSL",
                          "description": "Establish secure connection with Impala",
                          "type": "boolean"
                        },
                        "authOptions": {
                          "title": "URL Authentication Options",
                          "description": "Authentication options to pass to Impala connector. These options are based on SQLAlchemy.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/mariaDBConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MariaDBConnection",
                      "description": "MariaDB Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.MariaDBConnection",
                      "definitions": {
                        "mariaDBType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "MariaDB"
                          ],
                          "default": "MariaDB"
                        },
                        "mariaDBScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "mysql+pymysql"
                          ],
                          "default": "mysql+pymysql"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/12/definitions/mariaDBType",
                          "default": "MariaDB"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/12/definitions/mariaDBScheme",
                          "default": "mysql+pymysql"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to MariaDB. This user should have privileges to read all the metadata in MariaDB.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to MariaDB.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the MariaDB service.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/mssqlConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MssqlConnection",
                      "description": "Mssql Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.MssqlConnection",
                      "definitions": {
                        "mssqlType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Mssql"
                          ],
                          "default": "Mssql"
                        },
                        "mssqlScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "mssql+pyodbc",
                            "mssql+pytds",
                            "mssql+pymssql"
                          ],
                          "default": "mssql+pytds"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/13/definitions/mssqlType",
                          "default": "Mssql"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/13/definitions/mssqlScheme",
                          "default": "mssql+pytds"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to MSSQL. This user should have privileges to read all the metadata in MsSQL.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to MSSQL.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the MSSQL service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "driver": {
                          "title": "Driver",
                          "description": "ODBC driver version in case of pyodbc connection.",
                          "type": "string",
                          "default": "ODBC Driver 18 for SQL Server"
                        },
                        "ingestAllDatabases": {
                          "title": "Ingest All Databases",
                          "description": "Ingest data from all databases in Mssql. You can use databaseFilterPattern on top of this.",
                          "type": "boolean",
                          "default": false
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "database"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/mysqlConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MysqlConnection",
                      "description": "Mysql Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.MysqlConnection",
                      "definitions": {
                        "mySQLType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Mysql"
                          ],
                          "default": "Mysql"
                        },
                        "mySQLScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "mysql+pymysql"
                          ],
                          "default": "mysql+pymysql"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/14/definitions/mySQLType",
                          "default": "Mysql"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/14/definitions/mySQLScheme",
                          "default": "mysql+pymysql"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to MySQL. This user should have privileges to read all the metadata in Mysql.",
                          "type": "string"
                        },
                        "authType": {
                          "title": "Auth Configuration Type",
                          "description": "Choose Auth Config Type.",
                          "oneOf": [
                            {
                              "$id": "https://open-metadata.org/schema/entity/services/connections/database/common/basicAuth.json",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "Basic Auth",
                              "description": "Common Database Connection Config",
                              "javaType": "org.openmetadata.schema.services.connections.database.common.basicAuth",
                              "type": "object",
                              "properties": {
                                "password": {
                                  "title": "Password",
                                  "description": "Password to connect to source.",
                                  "type": "string",
                                  "format": "password"
                                }
                              },
                              "additionalProperties": false
                            },
                            {
                              "$id": "https://open-metadata.org/schema/entity/services/connections/database/common/iamAuthConfig.json",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "IAM Auth Configuration Source",
                              "description": "IAM Auth Database Connection Config",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.common.IamAuthConfig",
                              "properties": {
                                "awsConfig": {
                                  "title": "AWS Credentials Configuration",
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/9/properties/awsConfig"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the MySQL service.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "sslCA": {
                          "title": "SSL CA",
                          "description": "Provide the path to ssl ca file",
                          "type": "string"
                        },
                        "sslCert": {
                          "title": "SSL Client Certificate File",
                          "description": "Provide the path to ssl client certificate file (ssl_cert)",
                          "type": "string"
                        },
                        "sslKey": {
                          "title": "SSL Client Key File",
                          "description": "Provide the path to ssl client certificate file (ssl_key)",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/sqliteConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SQLiteConnection",
                      "description": "SQLite Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.SQLiteConnection",
                      "definitions": {
                        "SQLiteType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "SQLite"
                          ],
                          "default": "SQLite"
                        },
                        "SQLiteScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "sqlite+pysqlite"
                          ],
                          "default": "sqlite+pysqlite"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/15/definitions/SQLiteType",
                          "default": "SQLite"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/15/definitions/SQLiteScheme",
                          "default": "sqlite+pysqlite"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to SQLite. Blank for in-memory database.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to SQLite. Blank for in-memory database.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the SQLite service. Blank for in-memory database.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "databaseMode": {
                          "title": "Database Mode",
                          "description": "How to run the SQLite database. :memory: by default.",
                          "type": "string",
                          "default": ":memory:"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/oracleConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "OracleConnection",
                      "description": "Oracle Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.OracleConnection",
                      "definitions": {
                        "oracleType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Oracle"
                          ],
                          "default": "Oracle"
                        },
                        "oracleScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "oracle+cx_oracle"
                          ],
                          "default": "oracle+cx_oracle"
                        },
                        "OracleDatabaseSchema": {
                          "title": "Database Schema",
                          "type": "object",
                          "properties": {
                            "databaseSchema": {
                              "title": "DatabaseSchema",
                              "description": "databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "databaseSchema"
                          ]
                        },
                        "OracleServiceName": {
                          "title": "Oracle Service Name",
                          "type": "object",
                          "properties": {
                            "oracleServiceName": {
                              "title": "Oracle Service Name",
                              "description": "The Oracle Service name is the TNS alias that you give when you remotely connect to your database.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "oracleServiceName"
                          ]
                        },
                        "OracleTNSConnection": {
                          "title": "Oracle TNS Connection",
                          "type": "object",
                          "properties": {
                            "oracleTNSConnection": {
                              "title": "Oracle TNS Connection String",
                              "description": "Pass the full constructed TNS string, e.g., (DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=myhost)(PORT=1530)))(CONNECT_DATA=(SID=MYSERVICENAME))).",
                              "type": "string"
                            }
                          },
                          "required": [
                            "oracleTNSConnection"
                          ]
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/16/definitions/oracleType",
                          "default": "Oracle"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/16/definitions/oracleScheme",
                          "default": "oracle+cx_oracle"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Oracle. This user should have privileges to read all the metadata in Oracle.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Oracle.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Oracle service.",
                          "type": "string"
                        },
                        "oracleConnectionType": {
                          "title": "Oracle Connection Type",
                          "type": "object",
                          "description": "Connect with oracle by either passing service name or database schema name.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/16/definitions/OracleDatabaseSchema"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/16/definitions/OracleServiceName"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/16/definitions/OracleTNSConnection"
                            }
                          ]
                        },
                        "instantClientDirectory": {
                          "title": "Oracle instant client directory",
                          "type": "string",
                          "description": "This directory will be used to set the LD_LIBRARY_PATH env variable. It is required if you need to enable thick connection mode. By default, we bring instant client 19 and point to /instantclient.",
                          "default": "/instantclient"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "username",
                        "oracleConnectionType"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/postgresConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "PostgresConnection",
                      "description": "Postgres Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.PostgresConnection",
                      "definitions": {
                        "postgresType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Postgres"
                          ],
                          "default": "Postgres"
                        },
                        "postgresScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "postgresql+psycopg2",
                            "pgspider+psycopg2"
                          ],
                          "default": "postgresql+psycopg2"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/17/definitions/postgresType",
                          "default": "Postgres"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/17/definitions/postgresScheme",
                          "default": "postgresql+psycopg2"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Postgres. This user should have privileges to read all the metadata in Postgres.",
                          "type": "string"
                        },
                        "authType": {
                          "title": "Auth Configuration Type",
                          "description": "Choose Auth Config Type.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/14/properties/authType/oneOf/0"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/14/properties/authType/oneOf/1"
                            }
                          ]
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the source service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "ingestAllDatabases": {
                          "title": "Ingest All Databases",
                          "description": "Ingest data from all databases in Postgres. You can use databaseFilterPattern on top of this.",
                          "type": "boolean",
                          "default": false
                        },
                        "sslMode": {
                          "title": "SSL Mode",
                          "description": "SSL Mode to connect to postgres database.",
                          "enum": [
                            "disable",
                            "allow",
                            "prefer",
                            "require",
                            "verify-ca",
                            "verify-full"
                          ],
                          "default": "disable"
                        },
                        "sslConfig": {
                          "$ref": "#/definitions/workflowConfig/properties/openMetadataServerConfig/properties/sslConfig"
                        },
                        "classificationName": {
                          "title": "Classification Name",
                          "description": "Custom OpenMetadata Classification name for Postgres policy tags.",
                          "type": "string",
                          "default": "PostgresPolicyTags"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "database"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/prestoConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "PrestoConnection",
                      "description": "Presto Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.PrestoConnection",
                      "definitions": {
                        "prestoType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Presto"
                          ],
                          "default": "Presto"
                        },
                        "prestoScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "presto"
                          ],
                          "default": "presto"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/18/definitions/prestoType",
                          "default": "Presto"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/18/definitions/prestoScheme",
                          "default": "presto"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Presto. This user should have privileges to read all the metadata in Postgres.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Presto.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Presto service.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "catalog": {
                          "title": "Catalog",
                          "description": "Presto catalog",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/redshiftConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "RedshiftConnection",
                      "description": "Redshift  Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.RedshiftConnection",
                      "definitions": {
                        "redshiftType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Redshift"
                          ],
                          "default": "Redshift"
                        },
                        "redshiftScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "redshift+psycopg2"
                          ],
                          "default": "redshift+psycopg2"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/19/definitions/redshiftType",
                          "default": "Redshift"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/19/definitions/redshiftScheme",
                          "default": "redshift+psycopg2"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Redshift. This user should have privileges to read all the metadata in Redshift.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Redshift.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Redshift service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Initial Redshift database to connect to. If you want to ingest all databases, set ingestAllDatabases to true.",
                          "type": "string"
                        },
                        "ingestAllDatabases": {
                          "title": "Ingest All Databases",
                          "description": "Ingest data from all databases in Redshift. You can use databaseFilterPattern on top of this.",
                          "type": "boolean",
                          "default": false
                        },
                        "sslMode": {
                          "title": "SSL Mode",
                          "description": "SSL Mode to connect to redshift database.",
                          "enum": [
                            "disable",
                            "allow",
                            "prefer",
                            "require",
                            "verify-ca",
                            "verify-full"
                          ],
                          "default": "disable"
                        },
                        "sslConfig": {
                          "$ref": "#/definitions/workflowConfig/properties/openMetadataServerConfig/properties/sslConfig"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "database"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/salesforceConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SalesforceConnection",
                      "description": "Salesforce Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.SalesforceConnection",
                      "definitions": {
                        "salesforceType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Salesforce"
                          ],
                          "default": "Salesforce"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/20/definitions/salesforceType",
                          "default": "Salesforce"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to the Salesforce. This user should have privileges to read all the metadata in Redshift.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to the Salesforce.",
                          "type": "string",
                          "format": "password"
                        },
                        "securityToken": {
                          "title": "Security Token",
                          "description": "Salesforce Security Token.",
                          "type": "string",
                          "format": "password"
                        },
                        "sobjectName": {
                          "title": "Object Name",
                          "description": "Salesforce Object Name.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "salesforceApiVersion": {
                          "title": "Salesforce API Version",
                          "description": "API version of the Salesforce instance",
                          "type": "string",
                          "default": "42.0"
                        },
                        "salesforceDomain": {
                          "title": "Salesforce Domain",
                          "description": "Domain of Salesforce instance",
                          "type": "string",
                          "default": "login"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "username"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/singleStoreConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SingleStoreConnection",
                      "description": "SingleStore Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.SingleStoreConnection",
                      "definitions": {
                        "singleStoreType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "SingleStore"
                          ],
                          "default": "SingleStore"
                        },
                        "singleStoreScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "mysql+pymysql"
                          ],
                          "default": "mysql+pymysql"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/21/definitions/singleStoreType",
                          "default": "SingleStore"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/21/definitions/singleStoreScheme",
                          "default": "mysql+pymysql"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to SingleStore. This user should have privileges to read all the metadata in MySQL.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to SingleStore.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the SingleStore service.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/snowflakeConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SnowflakeConnection",
                      "description": "Snowflake Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.SnowflakeConnection",
                      "definitions": {
                        "snowflakeType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Snowflake"
                          ],
                          "default": "Snowflake"
                        },
                        "snowflakeScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "snowflake"
                          ],
                          "default": "snowflake"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/22/definitions/snowflakeType",
                          "default": "Snowflake"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/22/definitions/snowflakeScheme",
                          "default": "snowflake"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Snowflake. This user should have privileges to read all the metadata in Snowflake.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Snowflake.",
                          "type": "string",
                          "format": "password"
                        },
                        "account": {
                          "title": "Account",
                          "description": "If the Snowflake URL is https://xyz1234.us-east-1.gcp.snowflakecomputing.com, then the account is xyz1234.us-east-1.gcp",
                          "type": "string"
                        },
                        "role": {
                          "title": "Role",
                          "description": "Snowflake Role.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "warehouse": {
                          "title": "Warehouse",
                          "description": "Snowflake warehouse.",
                          "type": "string"
                        },
                        "queryTag": {
                          "title": "Query Tag",
                          "description": "Session query tag used to monitor usage on snowflake. To use a query tag snowflake user should have enough privileges to alter the session.",
                          "type": "string"
                        },
                        "privateKey": {
                          "title": "Private Key",
                          "description": "Connection to Snowflake instance via Private Key",
                          "type": "string",
                          "format": "password"
                        },
                        "snowflakePrivatekeyPassphrase": {
                          "title": "Snowflake Passphrase Key",
                          "description": "Snowflake Passphrase Key used with Private Key",
                          "type": "string",
                          "format": "password"
                        },
                        "includeTransientTables": {
                          "title": "Include Transient Tables",
                          "description": "Optional configuration for ingestion of TRANSIENT tables, By default, it will skip the TRANSIENT tables.",
                          "type": "boolean",
                          "default": false
                        },
                        "clientSessionKeepAlive": {
                          "title": "Client Session Keep Alive",
                          "description": "Optional configuration for ingestion to keep the client session active in case the ingestion process runs for longer durations.",
                          "type": "boolean",
                          "default": false
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "username",
                        "account",
                        "warehouse"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/trinoConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "TrinoConnection",
                      "description": "Trino Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.TrinoConnection",
                      "definitions": {
                        "trinoType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Trino"
                          ],
                          "default": "Trino"
                        },
                        "trinoScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "trino"
                          ],
                          "default": "trino"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/23/definitions/trinoType",
                          "default": "Trino"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/23/definitions/trinoScheme",
                          "default": "trino"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Trino. This user should have privileges to read all the metadata in Trino.",
                          "type": "string"
                        },
                        "authType": {
                          "title": "Auth Configuration Type",
                          "description": "Choose Auth Config Type.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/14/properties/authType/oneOf/0"
                            },
                            {
                              "$id": "https://open-metadata.org/schema/entity/services/connections/database/common/jwtAuth.json",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "JWT Auth",
                              "description": "Common Database Connection Config",
                              "javaType": "org.openmetadata.schema.services.connections.database.common.jwtAuth",
                              "type": "object",
                              "properties": {
                                "jwt": {
                                  "title": "JWT",
                                  "description": "JWT to connect to source.",
                                  "type": "string",
                                  "format": "password"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Trino service.",
                          "type": "string"
                        },
                        "catalog": {
                          "title": "Catalog",
                          "description": "Catalog of the data source.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "databaseSchema",
                          "description": "databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.",
                          "type": "string"
                        },
                        "proxies": {
                          "title": "Proxies",
                          "description": "Proxies for the connection to Trino data source",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "title": "Supports Usage Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "title": "Supports Lineage Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/verticaConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "VerticaConnection",
                      "description": "Vertica Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.VerticaConnection",
                      "definitions": {
                        "verticaType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Vertica"
                          ],
                          "default": "Vertica"
                        },
                        "verticaScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "vertica+vertica_python"
                          ],
                          "default": "vertica+vertica_python"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/24/definitions/verticaType",
                          "default": "Vertica"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/24/definitions/verticaScheme",
                          "default": "vertica+vertica_python"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Vertica. This user should have privileges to read all the metadata in Vertica.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Vertica.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Vertica service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/pinotDBConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "PinotDBConnection",
                      "description": "PinotDB Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.PinotDBConnection",
                      "definitions": {
                        "pinotDBType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "PinotDB"
                          ],
                          "default": "PinotDB"
                        },
                        "pinotDBScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "pinot",
                            "pinot+http",
                            "pinot+https"
                          ],
                          "default": "pinot"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/25/definitions/pinotDBType",
                          "default": "PinotDB"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/25/definitions/pinotDBScheme",
                          "default": "pinot"
                        },
                        "username": {
                          "title": "Username",
                          "description": "username to connect  to the PinotDB. This user should have privileges to read all the metadata in PinotDB.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "password to connect  to the PinotDB.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the PinotDB service.",
                          "type": "string"
                        },
                        "pinotControllerHost": {
                          "title": "Pinot Broker Host and Port",
                          "description": "Pinot Broker Host and Port of the data source.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "pinotControllerHost"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/datalakeConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DatalakeConnection",
                      "description": "Datalake Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.DatalakeConnection",
                      "definitions": {
                        "datalakeType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Datalake"
                          ],
                          "default": "Datalake"
                        },
                        "localConfig": {
                          "title": "Local Config",
                          "description": "Local config source where no extra information needs to be sent.",
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/26/definitions/datalakeType",
                          "default": "Datalake"
                        },
                        "configSource": {
                          "title": "DataLake Configuration Source",
                          "description": "Available sources to fetch files.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/26/definitions/localConfig"
                            },
                            {
                              "$id": "https://open-metadata.org/schema/entity/services/connections/database/datalake/azureConfig.json",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "AzureConfig",
                              "description": "Azure Datalake Storage will ingest files in container",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.datalake.AzureConfig",
                              "properties": {
                                "securityConfig": {
                                  "title": "Azure Datalake Config Source",
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/6/properties/config/oneOf/1/properties/credentials"
                                }
                              },
                              "additionalProperties": false
                            },
                            {
                              "$id": "https://open-metadata.org/schema/entity/services/connections/database/datalake/gcsConfig.json",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "GCSConfig",
                              "description": "DataLake GCS storage will ingest metadata of files",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.datalake.GCSConfig",
                              "properties": {
                                "securityConfig": {
                                  "title": "DataLake GCS Security Config",
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/credentials"
                                }
                              },
                              "additionalProperties": false
                            },
                            {
                              "$id": "https://open-metadata.org/schema/entity/services/connections/database/datalake/s3Config.json",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "S3Config",
                              "description": "DataLake S3 bucket will ingest metadata of files in bucket",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.datalake.S3Config",
                              "properties": {
                                "securityConfig": {
                                  "title": "DataLake S3 Security Config",
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/9/properties/awsConfig"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "bucketName": {
                          "title": "Bucket Name",
                          "description": "Bucket Name of the data source.",
                          "type": "string",
                          "default": ""
                        },
                        "prefix": {
                          "title": "Prefix",
                          "description": "Prefix of the data source.",
                          "type": "string",
                          "default": ""
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "configSource"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/domoDatabaseConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DomoDatabaseConnection",
                      "description": "Domo Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.DomoDatabaseConnection",
                      "definitions": {
                        "domoDatabaseType": {
                          "description": " service type",
                          "type": "string",
                          "enum": [
                            "DomoDatabase"
                          ],
                          "default": "DomoDatabase"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/27/definitions/domoDatabaseType",
                          "default": "DomoDatabase"
                        },
                        "clientId": {
                          "title": "Client ID",
                          "description": "Client ID for DOMO",
                          "type": "string"
                        },
                        "secretToken": {
                          "title": "Secret Token",
                          "description": "Secret Token to connect DOMO",
                          "type": "string",
                          "format": "password"
                        },
                        "accessToken": {
                          "title": "Access Token",
                          "description": "Access token to connect to DOMO",
                          "type": "string"
                        },
                        "apiHost": {
                          "expose": true,
                          "title": "API Host",
                          "description": "API Host to connect to DOMO instance",
                          "default": "api.domo.com",
                          "type": "string",
                          "format": "string"
                        },
                        "instanceDomain": {
                          "title": "Instance Domain",
                          "description": "URL of your Domo instance, e.g., https://openmetadata.domo.com",
                          "type": "string",
                          "format": "uri"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "clientId",
                        "secretToken",
                        "instanceDomain"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/customDatabaseConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomDatabaseConnection",
                      "description": "Custom Database Service connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.CustomDatabaseConnection",
                      "definitions": {
                        "customDatabaseType": {
                          "title": "Service Type",
                          "description": "Custom database service type",
                          "type": "string",
                          "enum": [
                            "CustomDatabase"
                          ],
                          "default": "CustomDatabase"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom database service type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/28/definitions/customDatabaseType",
                          "default": "CustomDatabase"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/sapHanaConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SapHanaConnection",
                      "description": "Sap Hana Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.SapHanaConnection",
                      "definitions": {
                        "sapHanaType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "SapHana"
                          ],
                          "default": "SapHana"
                        },
                        "sapHanaScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "hana"
                          ],
                          "default": "hana"
                        },
                        "sqlConnection": {
                          "title": "SQL Connection",
                          "description": "Options to connect to SAP Hana by passing the database information",
                          "type": "object",
                          "properties": {
                            "hostPort": {
                              "title": "Host and Port",
                              "description": "Host and port of the Hana service.",
                              "type": "string"
                            },
                            "username": {
                              "title": "Username",
                              "description": "Username to connect to Hana. This user should have privileges to read all the metadata.",
                              "type": "string"
                            },
                            "password": {
                              "title": "Password",
                              "description": "Password to connect to Hana.",
                              "type": "string",
                              "format": "password"
                            },
                            "databaseSchema": {
                              "title": "Database Schema",
                              "description": "Database Schema of the data source. This is an optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                              "type": "string"
                            },
                            "database": {
                              "title": "Database",
                              "description": "Database of the data source.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "username",
                            "password",
                            "hostPort"
                          ]
                        },
                        "hdbUserStoreConnection": {
                          "title": "HDB User Store Connection",
                          "description": "Use HDB User Store to avoid entering connection-related information manually. This store needs to be present on the client running the ingestion.",
                          "type": "object",
                          "properties": {
                            "userKey": {
                              "title": "User Key",
                              "description": "HDB Store User Key generated from the command `hdbuserstore SET <KEY> <host:port> <USERNAME> <PASSWORD>`",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/29/definitions/sapHanaType",
                          "default": "SapHana"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/29/definitions/sapHanaScheme",
                          "default": "hana"
                        },
                        "connection": {
                          "mask": true,
                          "title": "SAP Hana Connection",
                          "description": "Choose between Database connection or HDB User Store connection.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/29/definitions/sqlConnection"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/29/definitions/hdbUserStoreConnection"
                            }
                          ]
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "connection"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/mongoDBConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MongoDBConnection",
                      "description": "MongoDB Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.MongoDBConnection",
                      "definitions": {
                        "mongoDBType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "MongoDB"
                          ],
                          "default": "MongoDB"
                        },
                        "MongoConnectionString": {
                          "type": "object",
                          "javaType": "org.openmetadata.schema.services.connections.database.mongo.MongoConnectionString",
                          "title": "Mongo Connection String",
                          "properties": {
                            "connectionURI": {
                              "title": "Connection URI",
                              "description": "Connection URI to connect to your MongoDB cluster",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/30/definitions/mongoDBType",
                          "default": "MongoDB"
                        },
                        "connectionDetails": {
                          "title": "MongoDB Connection Details",
                          "description": "MongoDB Connection Details.",
                          "oneOf": [
                            {
                              "$id": "https://open-metadata.org/schema/entity/services/connections/database/datalake/azureConfig.json",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "Mongo Connection Values",
                              "description": "Azure Datalake Storage will ingest files in container",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.mongo.MongoConnectionValues",
                              "definitions": {
                                "mongoDBScheme": {
                                  "description": "Mongo connection scheme options.",
                                  "type": "string",
                                  "enum": [
                                    "mongodb",
                                    "mongodb+srv"
                                  ],
                                  "default": "mongodb"
                                }
                              },
                              "properties": {
                                "scheme": {
                                  "title": "Connection Scheme",
                                  "description": "Mongo connection scheme options.",
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/30/properties/connectionDetails/oneOf/0/definitions/mongoDBScheme",
                                  "default": "mongodb"
                                },
                                "username": {
                                  "title": "Username",
                                  "description": "Username to connect to MongoDB. This user should have privileges to read all the metadata in MongoDB.",
                                  "type": "string"
                                },
                                "password": {
                                  "title": "Password",
                                  "description": "Password to connect to MongoDB.",
                                  "type": "string",
                                  "format": "password"
                                },
                                "hostPort": {
                                  "title": "Host and Port",
                                  "description": "Host and port of the MongoDB service.",
                                  "type": "string"
                                },
                                "connectionOptions": {
                                  "title": "Connection Options",
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "hostPort"
                              ]
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/30/definitions/MongoConnectionString"
                            }
                          ]
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/couchbaseConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "Couchbase Connection",
                      "description": "Couchbase Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.CouchbaseConnection",
                      "definitions": {
                        "couchbaseType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Couchbase"
                          ],
                          "default": "Couchbase"
                        },
                        "couchbaseScheme": {
                          "description": "Couchbase driver scheme options.",
                          "type": "string",
                          "enum": [
                            "couchbase"
                          ],
                          "default": "couchbase"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/31/definitions/couchbaseType",
                          "default": "Couchbase"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "Couchbase driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/31/definitions/couchbaseScheme",
                          "default": "couchbase"
                        },
                        "bucket": {
                          "title": "Connection Bucket",
                          "description": "Couchbase connection Bucket options.",
                          "type": "string"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Couchbase. This user should have privileges to read all the metadata in Couchbase.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Couchbase.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostport": {
                          "title": "Hostport",
                          "description": "Hostname of the Couchbase service.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostport",
                        "username",
                        "password"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/database/greenplumConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "GreenplumConnection",
                      "description": "Greenplum Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.GreenplumConnection",
                      "definitions": {
                        "greenplumType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Greenplum"
                          ],
                          "default": "Greenplum"
                        },
                        "greenplumScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "postgresql+psycopg2"
                          ],
                          "default": "postgresql+psycopg2"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/32/definitions/greenplumType",
                          "default": "Greenplum"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/32/definitions/greenplumScheme",
                          "default": "postgresql+psycopg2"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Greenplum. This user should have privileges to read all the metadata in Greenplum.",
                          "type": "string"
                        },
                        "authType": {
                          "title": "Auth Configuration Type",
                          "description": "Choose Auth Config Type.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/14/properties/authType/oneOf/0"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/14/properties/authType/oneOf/1"
                            }
                          ]
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the source service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "sslMode": {
                          "title": "SSL Mode",
                          "description": "SSL Mode to connect to Greenplum database.",
                          "enum": [
                            "disable",
                            "allow",
                            "prefer",
                            "require",
                            "verify-ca",
                            "verify-full"
                          ],
                          "default": "disable"
                        },
                        "sslConfig": {
                          "$ref": "#/definitions/workflowConfig/properties/openMetadataServerConfig/properties/sslConfig"
                        },
                        "ingestAllDatabases": {
                          "title": "Ingest All Databases",
                          "description": "Ingest data from all databases in Greenplum. You can use databaseFilterPattern on top of this.",
                          "type": "boolean",
                          "default": false
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "database"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.type.MessagingConnection",
              "description": "Dashboard Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/messaging/kafkaConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "KafkaConnection",
                      "description": "Kafka Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.messaging.KafkaConnection",
                      "definitions": {
                        "kafkaType": {
                          "description": "Kafka service type",
                          "type": "string",
                          "enum": [
                            "Kafka"
                          ],
                          "default": "Kafka"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/definitions/kafkaType",
                          "default": "Kafka"
                        },
                        "bootstrapServers": {
                          "title": "Bootstrap Servers",
                          "description": "Kafka bootstrap servers. add them in comma separated values ex: host1:9092,host2:9092",
                          "type": "string"
                        },
                        "schemaRegistryURL": {
                          "title": "Schema Registry URL",
                          "description": "Confluent Kafka Schema Registry URL.",
                          "type": "string",
                          "format": "uri"
                        },
                        "saslUsername": {
                          "title": "SASL Username",
                          "description": "sasl.username consumer config property",
                          "type": "string"
                        },
                        "saslPassword": {
                          "title": "SASL Password",
                          "description": "sasl.password consumer config property",
                          "type": "string",
                          "format": "password"
                        },
                        "saslMechanism": {
                          "title": "SASL Mechanism",
                          "description": "sasl.mechanism Consumer Config property",
                          "default": "PLAIN",
                          "$id": "https://open-metadata.org/schema/entity/services/connections/messaging/saslMechanismType.json",
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "javaType": "org.openmetadata.schema.services.connections.messaging.SaslMechanismType",
                          "type": "string",
                          "enum": [
                            "PLAIN",
                            "GSSAPI",
                            "SCRAM-SHA-256",
                            "SCRAM-SHA-512",
                            "OAUTHBEARER"
                          ]
                        },
                        "basicAuthUserInfo": {
                          "title": "Basic Auth User Info",
                          "description": "basic.auth.user.info schema registry config property, Client HTTP credentials in the form of username:password.",
                          "type": "string",
                          "format": "password"
                        },
                        "consumerConfig": {
                          "title": "Consumer Config",
                          "description": "Confluent Kafka Consumer Config. From https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md",
                          "type": "object",
                          "default": {},
                          "additionalProperties": true
                        },
                        "schemaRegistryConfig": {
                          "title": "Schema Registry Config",
                          "description": "Confluent Kafka Schema Registry Config. From https://docs.confluent.io/5.5.1/clients/confluent-kafka-python/index.html#confluent_kafka.schema_registry.SchemaRegistryClient",
                          "type": "object",
                          "default": {},
                          "additionalProperties": true
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "bootstrapServers"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/messaging/RedpandaConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "RedpandaConnection",
                      "description": "Redpanda Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.messaging.RedpandaConnection",
                      "definitions": {
                        "RedpandaType": {
                          "description": "Redpanda service type",
                          "type": "string",
                          "enum": [
                            "Redpanda"
                          ],
                          "default": "Redpanda"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/2/properties/config/oneOf/1/definitions/RedpandaType",
                          "default": "Redpanda"
                        },
                        "bootstrapServers": {
                          "title": "Bootstrap Servers",
                          "description": "Redpanda bootstrap servers. add them in comma separated values ex: host1:9092,host2:9092",
                          "type": "string"
                        },
                        "schemaRegistryURL": {
                          "title": "Schema Registry URL",
                          "description": "Confluent Redpanda Schema Registry URL.",
                          "type": "string",
                          "format": "uri"
                        },
                        "saslUsername": {
                          "title": "SASL Username",
                          "description": "sasl.username consumer config property",
                          "type": "string"
                        },
                        "saslPassword": {
                          "title": "SASL Password",
                          "description": "sasl.password consumer config property",
                          "type": "string",
                          "format": "password"
                        },
                        "saslMechanism": {
                          "title": "SASL Mechanism",
                          "description": "sasl.mechanism Consumer Config property",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/saslMechanism",
                          "default": "PLAIN"
                        },
                        "basicAuthUserInfo": {
                          "title": "Basic Auth User Info",
                          "description": "basic.auth.user.info schema registry config property, Client HTTP credentials in the form of username:password.",
                          "type": "string",
                          "format": "password"
                        },
                        "consumerConfig": {
                          "title": "Consumer Config",
                          "description": "Confluent Redpanda Consumer Config",
                          "type": "object",
                          "default": {},
                          "additionalProperties": true
                        },
                        "schemaRegistryConfig": {
                          "title": "Schema Registry Config",
                          "description": "Confluent Redpanda Schema Registry Config.",
                          "type": "object",
                          "default": {},
                          "additionalProperties": true
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "bootstrapServers"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/messaging/kinesisConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "KinesisConnection",
                      "description": "Kinesis Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.messaging.KinesisConnection",
                      "definitions": {
                        "kinesisType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Kinesis"
                          ],
                          "default": "Kinesis"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/2/properties/config/oneOf/2/definitions/kinesisType",
                          "default": "Kinesis"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/9/properties/awsConfig"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/messaging/customMessagingConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomMessagingConnection",
                      "description": "Custom Messaging Service Connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.messaging.CustomMessagingConnection",
                      "definitions": {
                        "customMessagingType": {
                          "title": "Service Type",
                          "description": "Custom messaging service type",
                          "type": "string",
                          "enum": [
                            "CustomMessaging"
                          ],
                          "default": "CustomMessaging"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom messaging service type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/2/properties/config/oneOf/3/definitions/customMessagingType",
                          "default": "CustomMessaging"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.entity.services.MetadataConnection",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "description": "Metadata Service Connection.",
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/metadata/amundsenConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AmundsenConnection",
                      "description": "Amundsen Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.metadata.AmundsenConnection",
                      "definitions": {
                        "amundsenType": {
                          "description": "Amundsen service type",
                          "type": "string",
                          "enum": [
                            "Amundsen"
                          ],
                          "default": "Amundsen"
                        }
                      },
                      "properties": {
                        "type": {
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/definitions/amundsenType",
                          "default": "Amundsen"
                        },
                        "username": {
                          "description": "username to connect to the Amundsen Neo4j Connection.",
                          "type": "string"
                        },
                        "password": {
                          "description": "password to connect to the Amundsen Neo4j Connection.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "Host and port of the Amundsen Neo4j Connection. This expect a URI format like: bolt://localhost:7687.",
                          "type": "string",
                          "format": "uri"
                        },
                        "maxConnectionLifeTime": {
                          "description": "Maximum connection lifetime for the Amundsen Neo4j Connection.",
                          "type": "integer",
                          "default": 50
                        },
                        "validateSSL": {
                          "description": "Enable SSL validation for the Amundsen Neo4j Connection.",
                          "type": "boolean",
                          "default": false
                        },
                        "encrypted": {
                          "description": "Enable encryption for the Amundsen Neo4j Connection.",
                          "type": "boolean",
                          "default": false
                        },
                        "supportsMetadataExtraction": {
                          "description": "Supports Metadata Extraction.",
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "username",
                        "password",
                        "hostPort"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/metadata/metadataESConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MetadataESConnection",
                      "description": "Metadata to ElasticSearch Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.metadata.MetadataESConnection",
                      "definitions": {
                        "metadataESType": {
                          "description": "Metadata to Elastic Search type",
                          "type": "string",
                          "enum": [
                            "MetadataES"
                          ],
                          "default": "MetadataES"
                        }
                      },
                      "properties": {
                        "type": {
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/1/definitions/metadataESType",
                          "default": "MetadataES"
                        },
                        "entities": {
                          "title": "Entities",
                          "description": "List of entities that you need to reindex",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "default": [
                            "table",
                            "topic",
                            "dashboard",
                            "pipeline",
                            "mlmodel",
                            "user",
                            "team",
                            "glossaryTerm",
                            "tag",
                            "entityReportData",
                            "webAnalyticEntityViewReportData",
                            "webAnalyticUserActivityReportData",
                            "container",
                            "query"
                          ],
                          "uniqueItems": true
                        },
                        "recreateIndex": {
                          "title": "Recreate Indexes",
                          "type": "boolean",
                          "default": true
                        },
                        "runMode": {
                          "description": "This schema publisher run modes.",
                          "type": "string",
                          "enum": [
                            "stream",
                            "batch"
                          ]
                        },
                        "searchIndexMappingLanguage": {
                          "description": "Recreate Indexes with updated Language",
                          "$ref": "#/definitions/source/properties/sourceConfig/properties/config/oneOf/11/properties/searchIndexMappingLanguage"
                        },
                        "batchSize": {
                          "title": "Batch Size",
                          "description": "Maximum number of events sentx in a batch (Default 10).",
                          "type": "integer",
                          "default": 100
                        },
                        "supportsMetadataExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$ref": "#/definitions/workflowConfig/properties/openMetadataServerConfig"
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/metadata/atlasConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AtlasConnection",
                      "description": "Atlas Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.metadata.AtlasConnection",
                      "definitions": {
                        "atlasType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Atlas"
                          ],
                          "default": "Atlas"
                        }
                      },
                      "properties": {
                        "type": {
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/definitions/atlasType",
                          "default": "Atlas"
                        },
                        "username": {
                          "description": "username to connect  to the Atlas. This user should have privileges to read all the metadata in Atlas.",
                          "type": "string"
                        },
                        "password": {
                          "description": "password to connect  to the Atlas.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "description": "Host and port of the Atlas service.",
                          "title": "Host and Port",
                          "type": "string",
                          "format": "uri",
                          "expose": true
                        },
                        "databaseServiceName": {
                          "description": "service type of the data source.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "messagingServiceName": {
                          "description": "service type of the messaging source",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "entity_type": {
                          "title": "Entity Type",
                          "description": "Name of the Entity Type available in Atlas.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
                          "description": "Additional connection options to build the URL that can be sent to service during the connection.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "connectionArguments": {
                          "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
                          "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
                          "type": "object",
                          "additionalProperties": {
                            ".{1,}": {
                              "type": "string"
                            }
                          }
                        },
                        "supportsMetadataExtraction": {
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "required": [
                        "entity_type",
                        "username",
                        "password"
                      ],
                      "additionalProperties": false
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.type.PipelineConnection",
              "description": "Pipeline Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/pipeline/airflowConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AirflowConnection",
                      "description": "Airflow Metadata Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.AirflowConnection",
                      "definitions": {
                        "AirflowType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Airflow"
                          ],
                          "default": "Airflow"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/definitions/AirflowType",
                          "default": "Airflow"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host And Port",
                          "description": "Pipeline Service Management/UI URI.",
                          "type": "string",
                          "format": "uri"
                        },
                        "numberOfStatus": {
                          "description": "Pipeline Service Number Of Status",
                          "type": "integer",
                          "default": "10"
                        },
                        "connection": {
                          "title": "Metadata Database Connection",
                          "description": "Underlying database connection. See https://airflow.apache.org/docs/apache-airflow/stable/howto/set-up-database.html for supported backends.",
                          "oneOf": [
                            {
                              "$id": "https://open-metadata.org/schema/entity/services/connections/pipeline/backendConnection.json",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "BackendConnection",
                              "description": "Lineage Backend Connection Config",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.pipeline.BackendConnection",
                              "definitions": {
                                "BackendType": {
                                  "description": "Service type.",
                                  "type": "string",
                                  "enum": [
                                    "Backend"
                                  ],
                                  "default": "Backend"
                                }
                              },
                              "properties": {
                                "type": {
                                  "title": "Service Type",
                                  "description": "Service Type",
                                  "$ref": "#/definitions/source/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/connection/oneOf/0/definitions/BackendType",
                                  "default": "Backend"
                                }
                              },
                              "additionalProperties": false
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/14"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/17"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/13"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/1/properties/config/oneOf/15"
                            }
                          ]
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "connection"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/pipeline/glueConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "GluePipelineConnection",
                      "description": "Glue Pipeline Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.GluePipelineConnection",
                      "definitions": {
                        "glueType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "GluePipeline"
                          ],
                          "default": "GluePipeline"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/4/properties/config/oneOf/1/definitions/glueType",
                          "default": "GluePipeline"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/9/properties/awsConfig"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/pipeline/airbyteConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AirbyteConnection",
                      "description": "Airbyte Metadata Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.AirbyteConnection",
                      "definitions": {
                        "AirbyteType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Airbyte"
                          ],
                          "default": "Airbyte"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/4/properties/config/oneOf/2/definitions/AirbyteType",
                          "default": "Airbyte"
                        },
                        "hostPort": {
                          "expose": true,
                          "description": "Pipeline Service Management/UI URL.",
                          "type": "string",
                          "format": "uri"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Airbyte.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Airbyte.",
                          "type": "string",
                          "format": "password"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/pipeline/fivetranConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "FivetranConnection",
                      "description": "Fivetran Metadata Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.FivetranConnection",
                      "definitions": {
                        "FivetranType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Fivetran"
                          ],
                          "default": "Fivetran"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/definitions/FivetranType",
                          "default": "Fivetran"
                        },
                        "apiKey": {
                          "title": "Fivetran API Key",
                          "description": "Fivetran API Secret.",
                          "type": "string"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host And Port",
                          "description": "Pipeline Service Management/UI URI.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://api.fivetran.com"
                        },
                        "apiSecret": {
                          "title": "Fivetran API Secret",
                          "description": "Fivetran API Secret.",
                          "type": "string",
                          "format": "password"
                        },
                        "limit": {
                          "title": "Fivetran API Limit",
                          "description": "Fivetran API Limit For Pagination.",
                          "type": "integer",
                          "default": 1000
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "apiKey",
                        "apiSecret"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/pipeline/dagsterConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DagsterConnection",
                      "description": "Dagster Metadata Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.DagsterConnection",
                      "definitions": {
                        "DagsterType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Dagster"
                          ],
                          "default": "Dagster"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/4/properties/config/oneOf/4/definitions/DagsterType",
                          "default": "Dagster"
                        },
                        "host": {
                          "title": "Host",
                          "description": "URL to the Dagster instance",
                          "type": "string",
                          "format": "uri"
                        },
                        "token": {
                          "title": "Token",
                          "description": "To Connect to Dagster Cloud",
                          "type": "string",
                          "format": "password"
                        },
                        "timeout": {
                          "title": "Time Out",
                          "description": "Connection Time Limit Between OM and Dagster Graphql API in second",
                          "type": "integer",
                          "default": "1000"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "host"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/pipeline/nifiConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "NifiConnection",
                      "description": "Nifi Metadata Pipeline Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.NifiConnection",
                      "definitions": {
                        "NifiType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Nifi"
                          ],
                          "default": "Nifi"
                        },
                        "basicAuthentication": {
                          "title": "Username/Password Authentication",
                          "description": "username/password auth",
                          "type": "object",
                          "properties": {
                            "username": {
                              "title": "Username",
                              "description": "Nifi user to authenticate to the API.",
                              "type": "string"
                            },
                            "password": {
                              "title": "Password",
                              "description": "Nifi password to authenticate to the API.",
                              "type": "string",
                              "format": "password"
                            },
                            "verifySSL": {
                              "title": "Verify SSL",
                              "description": "Boolean marking if we need to verify the SSL certs for Nifi. False by default.",
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "clientCertificateAuthentication": {
                          "title": "Client Certificate Authentication",
                          "description": "client certificate auth",
                          "type": "object",
                          "properties": {
                            "certificateAuthorityPath": {
                              "title": "Certificat Authority Path",
                              "description": "Path to the root CA certificate",
                              "type": "string"
                            },
                            "clientCertificatePath": {
                              "title": "Client Certificat",
                              "description": "Path to the client certificate",
                              "type": "string"
                            },
                            "clientkeyPath": {
                              "title": "Client Key",
                              "description": "Path to the client key",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/4/properties/config/oneOf/5/definitions/NifiType",
                          "default": "Nifi"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host And Port",
                          "description": "Pipeline Service Management/UI URI.",
                          "type": "string",
                          "format": "uri"
                        },
                        "nifiConfig": {
                          "title": "Nifi Credentials Configuration",
                          "description": "We support username/password or client certificate authentication",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/4/properties/config/oneOf/5/definitions/basicAuthentication"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/4/properties/config/oneOf/5/definitions/clientCertificateAuthentication"
                            }
                          ]
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "nifiConfig"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/pipeline/domoPipelineConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DomoPipelineConnection",
                      "description": "Domo Pipeline Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.DomoPipelineConnection",
                      "definitions": {
                        "DomoPipelineType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "DomoPipeline"
                          ],
                          "default": "DomoPipeline"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/4/properties/config/oneOf/6/definitions/DomoPipelineType",
                          "default": "DomoPipeline"
                        },
                        "clientId": {
                          "title": "Client ID",
                          "description": "Client ID for DOMO",
                          "type": "string"
                        },
                        "secretToken": {
                          "title": "Secret Token",
                          "description": "Secret token to connect to DOMO",
                          "type": "string",
                          "format": "password"
                        },
                        "accessToken": {
                          "title": "Access Token",
                          "description": "Access token to connect to DOMO",
                          "type": "string"
                        },
                        "apiHost": {
                          "expose": true,
                          "title": "API Host",
                          "description": "API Host to connect to DOMO instance",
                          "default": "api.domo.com",
                          "type": "string",
                          "format": "string"
                        },
                        "instanceDomain": {
                          "title": "Instance Domain",
                          "description": "URL of your Domo instance, e.g., https://openmetadata.domo.com",
                          "type": "string",
                          "format": "uri"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "clientId",
                        "secretToken",
                        "instanceDomain"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/pipeline/customPipelineConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomPipelineConnection",
                      "description": "Custom Pipeline Service connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.CustomPipelineConnection",
                      "definitions": {
                        "customPipelineType": {
                          "title": "Service Type",
                          "description": "Custom pipeline service type",
                          "type": "string",
                          "enum": [
                            "CustomPipeline"
                          ],
                          "default": "CustomPipeline"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom pipeline service type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/4/properties/config/oneOf/7/definitions/customPipelineType",
                          "default": "CustomPipeline"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/pipeline/DatabricksPipelineConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DatabricksPipelineConnection",
                      "description": "Databricks Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.DatabricksPipelineConnection",
                      "definitions": {
                        "databricksType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "DatabricksPipeline"
                          ],
                          "default": "DatabricksPipeline"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/4/properties/config/oneOf/8/definitions/databricksType",
                          "default": "DatabricksPipeline"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Databricks service.",
                          "type": "string"
                        },
                        "token": {
                          "title": "Token",
                          "description": "Generated Token to connect to Databricks.",
                          "type": "string",
                          "format": "password"
                        },
                        "httpPath": {
                          "title": "Http Path",
                          "description": "Databricks compute resources URL.",
                          "type": "string"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "token"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/pipeline/splineConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SplineConnection",
                      "description": "Spline Metadata Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.SplineConnection",
                      "definitions": {
                        "SplineType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Spline"
                          ],
                          "default": "Spline"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/4/properties/config/oneOf/9/definitions/SplineType",
                          "default": "Spline"
                        },
                        "hostPort": {
                          "title": "Spline REST Server Host & Port",
                          "expose": true,
                          "description": "Spline REST Server Host & Port.",
                          "type": "string",
                          "format": "uri"
                        },
                        "uiHostPort": {
                          "title": "Spline UI Host & Port",
                          "expose": true,
                          "description": "Spline UI Host & Port.",
                          "type": "string",
                          "format": "uri"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.type.MlModelConnection",
              "description": "MlModel Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/mlmodel/mlflowConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MlflowConnection",
                      "description": "MlFlow Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.mlmodel.MlflowConnection",
                      "definitions": {
                        "mlflowType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Mlflow"
                          ],
                          "default": "Mlflow"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/5/properties/config/oneOf/0/definitions/mlflowType",
                          "default": "Mlflow"
                        },
                        "trackingUri": {
                          "title": "Tracking URI",
                          "description": "Mlflow Experiment tracking URI. E.g., http://localhost:5000",
                          "type": "string"
                        },
                        "registryUri": {
                          "title": "Registry URI",
                          "description": "Mlflow Model registry backend. E.g., mysql+pymysql://mlflow:password@localhost:3307/experiments",
                          "type": "string"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "trackingUri",
                        "registryUri"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/mlmodel/sklearnConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SklearnConnection",
                      "description": "Sklearn Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.mlmodel.SklearnConnection",
                      "definitions": {
                        "sklearnType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Sklearn"
                          ],
                          "default": "Sklearn"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/5/properties/config/oneOf/1/definitions/sklearnType",
                          "default": "Sklearn"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/mlmodel/customMlModelConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomMlModelConnection",
                      "description": "Custom MlModel Service connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.mlmodel.CustomMlModelConnection",
                      "definitions": {
                        "customMlModelType": {
                          "title": "Service Type",
                          "description": "Custom Ml model service type",
                          "type": "string",
                          "enum": [
                            "CustomMlModel"
                          ],
                          "default": "CustomMlModel"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom Ml model service type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/5/properties/config/oneOf/2/definitions/customMlModelType",
                          "default": "CustomMlModel"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/mlmodel/sageMakerConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SageMakerConnection",
                      "description": "SageMaker Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.mlmodel.SageMakerConnection",
                      "definitions": {
                        "sageMakerType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "SageMaker"
                          ],
                          "default": "SageMaker"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/5/properties/config/oneOf/3/definitions/sageMakerType",
                          "default": "SageMaker"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/9/properties/awsConfig"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.type.StorageConnection",
              "description": "storage Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/storage/s3Connection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "S3 Connection",
                      "description": "S3 Connection.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.storage.S3Connection",
                      "definitions": {
                        "s3Type": {
                          "description": "S3 service type",
                          "type": "string",
                          "enum": [
                            "S3"
                          ],
                          "default": "S3"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/6/properties/config/oneOf/0/definitions/s3Type",
                          "default": "S3"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/0/properties/config/oneOf/9/properties/awsConfig"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/storage/adlsConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "ADLS Connection",
                      "description": "ADLS Connection.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.storage.ADLSConnection",
                      "definitions": {
                        "azureType": {
                          "description": "ADLS service type",
                          "type": "string",
                          "enum": [
                            "ADLS"
                          ],
                          "default": "ADLS"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/6/properties/config/oneOf/1/definitions/azureType",
                          "default": "ADLS"
                        },
                        "credentials": {
                          "title": "Azure Credentials",
                          "description": "Azure Credentials",
                          "$id": "https://open-metadata.org/schema/security/credentials/azureCredentials.json",
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "type": "object",
                          "javaType": "org.openmetadata.schema.security.credentials.AzureCredentials",
                          "properties": {
                            "clientId": {
                              "title": "Client ID",
                              "description": "Your Service Principal App ID (Client ID)",
                              "type": "string"
                            },
                            "clientSecret": {
                              "title": "Client Secret",
                              "description": "Your Service Principal Password (Client Secret)",
                              "type": "string",
                              "format": "password"
                            },
                            "tenantId": {
                              "title": "Tenant ID",
                              "description": "Tenant ID of your Azure Subscription",
                              "type": "string"
                            },
                            "accountName": {
                              "title": "Account Name",
                              "description": "Account Name of your storage account",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "clientId",
                            "clientSecret",
                            "tenantId",
                            "accountName"
                          ]
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "credentials"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/storage/customStorageConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomStorageConnection",
                      "description": "Custom Storage Service connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.storage.CustomStorageConnection",
                      "definitions": {
                        "customStorageType": {
                          "title": "Service Type",
                          "description": "Custom storage service type",
                          "type": "string",
                          "enum": [
                            "CustomStorage"
                          ],
                          "default": "CustomStorage"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom storage service type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/6/properties/config/oneOf/2/definitions/customStorageType",
                          "default": "CustomStorage"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.type.SearchConnection",
              "description": "search Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/search/elasticSearchConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "ElasticSearch Connection",
                      "description": "ElasticSearch Connection.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.search.ElasticSearchConnection",
                      "definitions": {
                        "elasticSearchType": {
                          "description": "ElasticSearch service type",
                          "type": "string",
                          "enum": [
                            "ElasticSearch"
                          ],
                          "default": "ElasticSearch"
                        },
                        "basicAuthentication": {
                          "title": "Basic Authentication",
                          "properties": {
                            "username": {
                              "title": "Username",
                              "description": "Elastic Search Username for Login",
                              "type": "string"
                            },
                            "password": {
                              "title": "Password",
                              "description": "Elastic Search Password for Login",
                              "type": "string",
                              "format": "password"
                            }
                          },
                          "type": "object"
                        },
                        "apiAuthentication": {
                          "title": "API Key Authentication",
                          "type": "object",
                          "properties": {
                            "apiKey": {
                              "title": "API Key",
                              "description": "Elastic Search API Key for API Authentication",
                              "type": "string",
                              "format": "password"
                            },
                            "apiKeyId": {
                              "title": "API Key ID",
                              "description": "Elastic Search API Key ID for API Authentication",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "ElasticSearch Type",
                          "description": "ElasticSearch Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/7/properties/config/oneOf/0/definitions/elasticSearchType",
                          "default": "ElasticSearch"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the ElasticSearch service.",
                          "type": "string",
                          "format": "uri"
                        },
                        "authType": {
                          "title": "Auth Configuration Type",
                          "description": "Choose Auth Config Type.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/7/properties/config/oneOf/0/definitions/basicAuthentication"
                            },
                            {
                              "$ref": "#/definitions/source/properties/serviceConnection/oneOf/7/properties/config/oneOf/0/definitions/apiAuthentication"
                            }
                          ]
                        },
                        "caCert": {
                          "title": "Client Certificate Path",
                          "description": "Path to CA Cert File",
                          "type": "string"
                        },
                        "connectionTimeoutSecs": {
                          "title": "Connection Timeout in Seconds",
                          "description": "Connection Timeout in Seconds",
                          "type": "integer",
                          "default": 30
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/search/openSearchConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "OpenSearch Connection",
                      "description": "OpenSearch Connection.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.search.OpenSearchConnection",
                      "definitions": {
                        "openSearchType": {
                          "description": "OpenSearch service type",
                          "type": "string",
                          "enum": [
                            "OpenSearch"
                          ],
                          "default": "OpenSearch"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/7/properties/config/oneOf/1/definitions/openSearchType",
                          "default": "OpenSearch"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the OpenSearch service.",
                          "type": "string"
                        },
                        "scheme": {
                          "description": "Http/Https connection scheme",
                          "type": "string"
                        },
                        "username": {
                          "description": "OpenSearch Username for Login",
                          "type": "string"
                        },
                        "password": {
                          "description": "OpenSearch Password for Login",
                          "type": "string"
                        },
                        "truststorePath": {
                          "description": "Truststore Path",
                          "type": "string"
                        },
                        "truststorePassword": {
                          "description": "Truststore Password",
                          "type": "string"
                        },
                        "connectionTimeoutSecs": {
                          "description": "Connection Timeout in Seconds",
                          "type": "integer",
                          "default": 5
                        },
                        "socketTimeoutSecs": {
                          "description": "Socket Timeout in Seconds",
                          "type": "integer",
                          "default": 60
                        },
                        "keepAliveTimeoutSecs": {
                          "description": "Keep Alive Timeout in Seconds",
                          "type": "integer"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$id": "https://open-metadata.org/schema/entity/services/connections/search/customSearchConnection.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomSearchConnection",
                      "description": "Custom Search Service connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.search.CustomSearchConnection",
                      "definitions": {
                        "customSearchType": {
                          "title": "Service Type",
                          "description": "Custom search service type",
                          "type": "string",
                          "enum": [
                            "CustomSearch"
                          ],
                          "default": "CustomSearch"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom search service type",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/7/properties/config/oneOf/2/definitions/customSearchType",
                          "default": "CustomSearch"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/source/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/properties/connectionOptions"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "sourceConfig": {
          "$ref": "#/definitions/sourceConfig"
        }
      },
      "additionalProperties": false,
      "required": [
        "type",
        "serviceName",
        "sourceConfig"
      ]
    },
    "processor": {
      "description": "Configuration for Processor Component in the OpenMetadata Ingestion Framework.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of processor component ex: pii-processor",
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/sink/properties/config"
        }
      },
      "additionalProperties": false,
      "required": [
        "type"
      ]
    },
    "stage": {
      "description": "Configuration for Stage Component in the OpenMetadata Ingestion Framework.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of stage component ex: table-usage",
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/sink/properties/config"
        }
      },
      "additionalProperties": false,
      "required": [
        "type"
      ]
    },
    "sink": {
      "description": "Configuration for Sink Component in the OpenMetadata Ingestion Framework.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of sink component ex: metadata",
          "type": "string"
        },
        "config": {
          "description": "key/value pairs to pass to workflow component.",
          "type": "object",
          "additionalProperties": {
            ".{1,}": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "type"
      ]
    },
    "bulkSink": {
      "description": "Configuration for BulkSink Component in the OpenMetadata Ingestion Framework.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of BulkSink component ex: metadata-usage",
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/sink/properties/config"
        }
      },
      "additionalProperties": false,
      "required": [
        "type"
      ]
    },
    "logLevels": {
      "description": "Supported logging levels",
      "javaType": "org.openmetadata.schema.metadataIngestion.LogLevels",
      "type": "string",
      "enum": [
        "DEBUG",
        "INFO",
        "WARN",
        "ERROR"
      ],
      "default": "INFO"
    },
    "workflowConfig": {
      "description": "Configuration for the entire Ingestion Workflow.",
      "type": "object",
      "properties": {
        "loggerLevel": {
          "$ref": "#/definitions/logLevels",
          "default": "INFO"
        },
        "openMetadataServerConfig": {
          "$id": "https://open-metadata.org/schema/entity/services/connections/metadata/openMetadataConnection.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "OpenMetadataConnection",
          "description": "OpenMetadata Connection Config",
          "type": "object",
          "javaType": "org.openmetadata.schema.services.connections.metadata.OpenMetadataConnection",
          "definitions": {
            "openmetadataType": {
              "description": "OpenMetadata service type",
              "type": "string",
              "enum": [
                "OpenMetadata"
              ],
              "default": "OpenMetadata"
            },
            "extraHeaders": {
              "description": "Additional headers to be sent to the API endpoint.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "authProvider": {
              "javaType": "org.openmetadata.schema.services.connections.metadata.AuthProvider",
              "description": "OpenMetadata Server Authentication Provider. Make sure configure same auth providers as the one configured on OpenMetadata server.",
              "type": "string",
              "enum": [
                "no-auth",
                "basic",
                "azure",
                "google",
                "okta",
                "auth0",
                "aws-cognito",
                "custom-oidc",
                "ldap",
                "saml",
                "openmetadata"
              ],
              "default": "basic"
            }
          },
          "properties": {
            "clusterName": {
              "description": "Cluster name to differentiate OpenMetadata Server instance",
              "type": "string",
              "default": "openmetadata"
            },
            "type": {
              "description": "Service Type",
              "$ref": "#/definitions/workflowConfig/properties/openMetadataServerConfig/definitions/openmetadataType",
              "default": "OpenMetadata"
            },
            "hostPort": {
              "description": "OpenMetadata Server Config. Must include API end point ex: http://localhost:8585/api",
              "type": "string",
              "default": "http://localhost:8585/api"
            },
            "authProvider": {
              "$ref": "#/definitions/workflowConfig/properties/openMetadataServerConfig/definitions/authProvider"
            },
            "verifySSL": {
              "default": "no-ssl",
              "title": "Verify SSL",
              "description": "Client SSL verification. Make sure to configure the SSLConfig if enabled.",
              "javaType": "org.openmetadata.schema.security.ssl.VerifySSL",
              "type": "string",
              "enum": [
                "no-ssl",
                "ignore",
                "validate"
              ]
            },
            "sslConfig": {
              "title": "SSL Config",
              "description": "Client SSL configuration",
              "javaType": "org.openmetadata.schema.security.ssl.SSLConfig",
              "oneOf": [
                {
                  "$id": "https://open-metadata.org/schema/security/ssl/validateSSLClientConfig.json",
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Validate SSL Client Config",
                  "description": "OpenMetadata Client configured to validate SSL certificates.",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.security.ssl.ValidateSSLClientConfig",
                  "properties": {
                    "certificatePath": {
                      "title": "Certificate Path",
                      "description": "CA certificate path. E.g., /path/to/public.cert. Will be used if Verify SSL is set to `validate`.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "securityConfig": {
              "mask": true,
              "description": "OpenMetadata Client security configuration.",
              "oneOf": [
                {
                  "$id": "https://open-metadata.org/schema/security/client/googleSSOClientConfig.json",
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "GoogleSSOClientConfig",
                  "description": "Google SSO client security configs.",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.security.client.GoogleSSOClientConfig",
                  "properties": {
                    "secretKey": {
                      "description": "Google SSO client secret key path or contents.",
                      "type": "string",
                      "format": "password"
                    },
                    "audience": {
                      "description": "Google SSO audience URL",
                      "type": "string",
                      "default": "https://www.googleapis.com/oauth2/v4/token"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "secretKey"
                  ]
                },
                {
                  "$id": "https://open-metadata.org/schema/security/client/oktaSSOClientConfig.json",
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "OktaSSOClientConfig",
                  "description": "Okta SSO client security configs.",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.security.client.OktaSSOClientConfig",
                  "properties": {
                    "clientId": {
                      "description": "Okta Client ID.",
                      "type": "string"
                    },
                    "orgURL": {
                      "description": "Okta org url.",
                      "type": "string"
                    },
                    "privateKey": {
                      "description": "Okta Private Key.",
                      "type": "string",
                      "format": "password"
                    },
                    "email": {
                      "description": "Okta Service account Email.",
                      "type": "string"
                    },
                    "scopes": {
                      "type": "array",
                      "description": "Okta client scopes.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "clientId",
                    "orgURL",
                    "privateKey",
                    "email"
                  ]
                },
                {
                  "$id": "https://open-metadata.org/schema/security/client/auth0SSOClientConfig.json",
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Auth0SSOClientConfig",
                  "description": "Auth0 SSO client security configs.",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.security.client.Auth0SSOClientConfig",
                  "properties": {
                    "clientId": {
                      "description": "Auth0 Client ID.",
                      "type": "string"
                    },
                    "secretKey": {
                      "description": "Auth0 Client Secret Key.",
                      "type": "string",
                      "format": "password"
                    },
                    "domain": {
                      "description": "Auth0 Domain.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "clientId",
                    "secretKey",
                    "domain"
                  ]
                },
                {
                  "$id": "https://open-metadata.org/schema/security/client/azureSSOClientConfig.json",
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "AzureSSOClientConfig",
                  "description": "Azure SSO Client security config to connect to OpenMetadata.",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.security.client.AzureSSOClientConfig",
                  "properties": {
                    "clientSecret": {
                      "description": "Azure SSO client secret key",
                      "type": "string",
                      "format": "password"
                    },
                    "authority": {
                      "description": "Azure SSO Authority",
                      "type": "string"
                    },
                    "clientId": {
                      "description": "Azure Client ID.",
                      "type": "string"
                    },
                    "scopes": {
                      "description": "Azure Client ID.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "clientSecret",
                    "clientId",
                    "authority",
                    "scopes"
                  ]
                },
                {
                  "$id": "https://open-metadata.org/schema/security/client/customOidcSSOClientConfig.json",
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "CustomOIDCSSOClientConfig",
                  "description": "Custom OIDC SSO client security configs.",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.security.client.CustomOIDCSSOClientConfig",
                  "properties": {
                    "clientId": {
                      "description": "Custom OIDC Client ID.",
                      "type": "string"
                    },
                    "secretKey": {
                      "description": "Custom OIDC Client Secret Key.",
                      "type": "string",
                      "format": "password"
                    },
                    "tokenEndpoint": {
                      "description": "Custom OIDC token endpoint.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "clientId",
                    "secretKey",
                    "tokenEndpoint"
                  ]
                },
                {
                  "$id": "https://open-metadata.org/schema/security/client/openMetadataJWTClientConfig.json",
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "openMetadataJWTClientConfig",
                  "description": "openMetadataJWTClientConfig security configs.",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.security.client.OpenMetadataJWTClientConfig",
                  "properties": {
                    "jwtToken": {
                      "description": "OpenMetadata generated JWT token.",
                      "type": "string",
                      "format": "password"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "jwtToken"
                  ]
                }
              ]
            },
            "secretsManagerProvider": {
              "default": "noop",
              "$id": "https://open-metadata.org/schema/security/secrets/secretsManagerProvider.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "Secrets Manager Provider",
              "description": "OpenMetadata Secrets Manager Provider. Make sure to configure the same secrets manager providers as the ones configured on the OpenMetadata server.",
              "type": "string",
              "javaType": "org.openmetadata.schema.security.secrets.SecretsManagerProvider",
              "enum": [
                "noop",
                "managed-aws",
                "aws",
                "managed-aws-ssm",
                "aws-ssm",
                "in-memory"
              ],
              "additionalProperties": false
            },
            "secretsManagerLoader": {
              "default": "noop",
              "$id": "https://open-metadata.org/schema/security/secrets/secretsManagerClientLoader.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "title": "Secrets Manager Client Loader",
              "description": "OpenMetadata Secrets Manager Client Loader. Lets the client know how the Secrets Manager Credentials should be loaded from the environment.",
              "type": "string",
              "javaType": "org.openmetadata.schema.security.secrets.SecretsManagerClientLoader",
              "enum": [
                "noop",
                "airflow",
                "env"
              ],
              "additionalProperties": false
            },
            "apiVersion": {
              "description": "OpenMetadata server API version to use.",
              "type": "string",
              "default": "v1"
            },
            "includeTopics": {
              "description": "Include Topics for Indexing",
              "type": "boolean",
              "default": true
            },
            "includeTables": {
              "description": "Include Tables for Indexing",
              "type": "boolean",
              "default": true
            },
            "includeDashboards": {
              "description": "Include Dashboards for Indexing",
              "type": "boolean",
              "default": true
            },
            "includePipelines": {
              "description": "Include Pipelines for Indexing",
              "type": "boolean",
              "default": true
            },
            "includeMlModels": {
              "description": "Include MlModels for Indexing",
              "type": "boolean",
              "default": true
            },
            "includeUsers": {
              "description": "Include Users for Indexing",
              "type": "boolean",
              "default": true
            },
            "includeTeams": {
              "description": "Include Teams for Indexing",
              "type": "boolean",
              "default": true
            },
            "includeGlossaryTerms": {
              "description": "Include Glossary Terms for Indexing",
              "type": "boolean",
              "default": true
            },
            "includeTags": {
              "description": "Include Tags for Indexing",
              "type": "boolean",
              "default": true
            },
            "includePolicy": {
              "description": "Include Tags for Policy",
              "type": "boolean",
              "default": true
            },
            "includeMessagingServices": {
              "description": "Include Messaging Services for Indexing",
              "type": "boolean",
              "default": true
            },
            "enableVersionValidation": {
              "description": "Validate Openmetadata Server & Client Version.",
              "type": "boolean",
              "default": true
            },
            "includeDatabaseServices": {
              "description": "Include Database Services for Indexing",
              "type": "boolean",
              "default": true
            },
            "includePipelineServices": {
              "description": "Include Pipeline Services for Indexing",
              "type": "boolean",
              "default": true
            },
            "limitRecords": {
              "description": "Limit the number of records for Indexing.",
              "type": "integer",
              "default": "1000"
            },
            "forceEntityOverwriting": {
              "description": "Force the overwriting of any entity during the ingestion.",
              "type": "boolean",
              "default": false
            },
            "storeServiceConnection": {
              "description": "If set to true, when creating a service during the ingestion we will store its Service Connection. Otherwise, the ingestion will create a bare service without connection details.",
              "type": "boolean",
              "default": true
            },
            "elasticsSearch": {
              "description": "Configuration for Sink Component in the OpenMetadata Ingestion Framework.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "Type of sink component ex: metadata",
                  "type": "string"
                },
                "config": {
                  "$ref": "#/definitions/sink/properties/config"
                }
              },
              "additionalProperties": false,
              "required": [
                "type"
              ]
            },
            "supportsDataInsightExtraction": {
              "description": "Support Metadata To Elastic Search",
              "type": "boolean",
              "default": true
            },
            "supportsElasticSearchReindexingExtraction": {
              "description": "Support Elastic Search Reindexing",
              "type": "boolean",
              "default": true
            },
            "extraHeaders": {
              "title": "Extra Headers",
              "$ref": "#/definitions/workflowConfig/properties/openMetadataServerConfig/definitions/extraHeaders"
            }
          },
          "additionalProperties": false,
          "required": [
            "hostPort"
          ]
        },
        "config": {
          "$ref": "#/definitions/sink/properties/config"
        }
      },
      "additionalProperties": false,
      "required": [
        "openMetadataServerConfig"
      ]
    }
  },
  "properties": {
    "id": {
      "description": "Unique identifier that identifies this pipeline.",
      "type": "string",
      "format": "uuid"
    },
    "name": {
      "description": "Name that identifies this pipeline instance uniquely.",
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "pattern": "^(?U)[\\w'\\- .&()%]+$"
    },
    "openMetadataWorkflowConfig": {
      "description": "OpenMetadata Ingestion Workflow Config.",
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/source"
        },
        "processor": {
          "$ref": "#/definitions/processor"
        },
        "sink": {
          "$ref": "#/definitions/sink"
        },
        "stage": {
          "$ref": "#/definitions/stage"
        },
        "bulkSink": {
          "$ref": "#/definitions/bulkSink"
        },
        "workflowConfig": {
          "$ref": "#/definitions/workflowConfig"
        },
        "ingestionPipelineFQN": {
          "description": "Fully qualified name of ingestion pipeline, used to identify the current ingestion pipeline",
          "type": "string"
        },
        "pipelineRunId": {
          "description": "Unique identifier of pipeline run, used to identify the current pipeline run",
          "$ref": "#/properties/id"
        }
      },
      "required": [
        "source",
        "workflowConfig"
      ],
      "additionalProperties": false
    }
  },
  "oneOf": [
    {
      "required": [
        "name",
        "openMetadataWorkflowConfig",
        "source",
        "sink"
      ]
    },
    {
      "required": [
        "name",
        "openMetadataWorkflowConfig",
        "source",
        "bulkSink"
      ]
    }
  ],
  "additionalProperties": false
}